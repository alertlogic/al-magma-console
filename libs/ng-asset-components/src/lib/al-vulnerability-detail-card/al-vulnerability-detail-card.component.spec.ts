import {
    ComponentFixture,
    TestBed,
    fakeAsync,
    tick,
} from '@angular/core/testing';
import { AlExposureMiniCardComponent } from '../al-exposure-mini-card/al-exposure-mini-card.component';
import { AlRemediationAssetItemComponent } from '../al-remediation-asset-item/al-remediation-asset-item.component';
import { AlVulnerabilityDetailCardComponent } from './al-vulnerability-detail-card.component';
import { Exposure } from '../types';
import {
    Vulnerability,
    AlVulnerabilitiesClient
} from '@al/vulnerabilities';

describe('AlVulnerabilityDetailCardComponent', () => {
    let component: AlVulnerabilityDetailCardComponent;
    let fixture: ComponentFixture<AlVulnerabilityDetailCardComponent>;

    let exposureMock:Exposure = {
        hasComplementaryData: false,
        accountId: "134249236",
        assetCount: 5,
        "categories": [
          "configuration"
        ],
        cvssScore: 10,
        cvssVector: "AV:N/AC:L/Au:N/C:C/I:C/A:C/PL:A/EM:A",
        "external": false,
        "name": "Host Without Alert Logic Agent",
        remediationId: "agent_install_agent",
        "severity": "high",
        "tags": {},
        "threatiness": 40,
        threatLevel: 3,
        threatScore: 10,
        threatVector: "AV:N/AC:L/Au:N/C:C/I:C/A:C/PL:A/EM:A",
        "type": "vulnerability",
        vinstancesCount: 1,
        "vinstances": [
          {
            "categories": [
              "configuration"
            ],
            "concluded": false,
            "details": "The host does not have an agent installed",
            "disposed": false,
            "key": "/aws/us-west-2/host/i-0e3a9ghawad2b4b48/vulnerability/fbfd50aa180098eee78761c07d62f94f",
            "modifiedOn": 1591956722819,
            "threatiness": 8
          }
        ],
        vulnerability_id: "489b02c4d4022eb7c2550801df621be5"
    } as Exposure;

    let vulnerabilityDetailsMock:Vulnerability = {
        id: "489b02c4d4022eb7c2550801df621be5",
        impact: "The host could be in risk",
        description: "The host does not have an agent installed",
        remediation_id: "agent_install_agent",
        cvss_vector: "AV:N/AC:L/Au:N/C:C/I:C/A:C/PL:A/EM:A",
        resolution: "Go and fix here http://www.google.com",
        severity: "high"
    };

    beforeEach(() => {
        jest.spyOn(AlVulnerabilitiesClient,"getVulnerability").mockReturnValue(Promise.resolve(vulnerabilityDetailsMock));
        TestBed.configureTestingModule({
            declarations: [ AlVulnerabilityDetailCardComponent, AlExposureMiniCardComponent, AlRemediationAssetItemComponent ]
        }).compileComponents();
        fixture = TestBed.createComponent(AlVulnerabilityDetailCardComponent);
        component = fixture.componentInstance;
        component.exposure = exposureMock;
    });

    it('should create the component without failing', () => {
        expect(component).toBeTruthy();
    });

    it('WHEN vulnerability card is expanded should retrieve complementary data', fakeAsync(() => {
        component.toggleVulnDetails({stopPropagation: function () {
            // Mock the event and do nothing.
        }});
        tick();
        expect(component.exposure.impact).toEqual("The host could be in risk");
        expect(component.exposure.description).toEqual("The host does not have an agent installed");
        expect(component.exposure.resolution).toEqual("Go and fix here http://www.google.com");
        expect(component.exposure.hasComplementaryData).toBeTruthy();
    }));
});
