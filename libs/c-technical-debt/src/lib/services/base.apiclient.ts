/**
 *  BaseAPIClient class.  Provides a base class for clients of Alert Logic APIs with standard pathing
 *  assumptions and several convenience features.
 *
 *  @author McNielsen (knielsen@alertlogic.com)
 *
 *  @copyright Alert Logic Inc, 2017.
 *
 *  Any service client can use BaseAPIClient by importing it, extending its service class, and then constructing the parent
 *  with information about the service it intends to interact with (site, service, version #).
 *
 *  The BaseAPIClient provides convenient shortcut methods for `get`, `post`, `put`, and `delete` operations.  Unless an alternative
 *  response transformation is applied, the default transformation (json decode) will be used.  These methods all return observables
 *  that MUST be subscribed to in order for the request to actually be initiated.
 *
 *  For more complicated requests, the `request` method returns a RequestBuilder instance that can be interacted with and
 *  customized before the request Observable is created.  An unrealistic but fully-featured example:
 *
 *  ```
 *      request = super.request("GET", "top-menu-options" )
 *                      .param( "context", "something" );               //  sets a query parameter
 *                      .paramIf( someValue === 1, "extras", "true" )   //  sets a query parameter if an expression evaluates as truthy
 *                      .base( "cd14:api", "core/utility" )             //  overrides the default base for the request -- this will cause the URL to hit CD14's internal APIs at core/utility/top-menu-options
 *                      .transform( response => { return response.json(); } )   //  specifies how the response should be transformed before the observable issues data from it
 *                      .transform( data => { ... return data; } )      //  transformers can be chained.  This could convert the array into a specific type, for instance.
 *                      .data( myPayload )                              //  sets data to be put/posted
 *                      .header( "X-AlertLogic-Hootenanny", "Yeppers" ) //  set a header
 *                      .execute();                                     //  creates an observable for the request
 *  ```
 *
 *  Important note: unlike the simple request helpers, `request` does NOT apply a default transformation to return the response's json; you must add this if you want it.
 *  Also, like the other methods, the observable -- generated by execute(), which should always be the last call in the RequestBuilder chain -- MUST be subscribed to
 *  for the request to actually be issued.  If you don't get any results, make sure you're subscribing to the right thing :)
 */


import { Observable, of as observableOf, Subscriber } from 'rxjs';
import { map } from 'rxjs/operators';

import { RequestBuilder } from '../types';
import { AlLocatorService, AlCabinet, AlLocation, AlSession, AlDefaultClient, APIRequestParams } from '@al/core';
import { Method, AxiosResponse } from 'axios';

/**
 *  APIClientBaseService provides a wrapper for angular2's Http module that makes some
 *  (hopefully useful) assumptions about Alert Logic API structures.  Please note that
 *  most of these assumptions are based on Cloud Insight API designs.
 */

export class BaseAPIClient
{
    private static internetExplorer:boolean     =   false;
    private static endpointCache                =   AlCabinet.ephemeral( "baseapi.endpoints" );

    protected useEndpoints:boolean              =   false;
    protected maxRetryCount:number              =   0;            //  No retries by default

    constructor(    public      serviceSite:string,
                    public      serviceName:string,
                    public      serviceVersion:number = null) {
    }

    /**
     *  Forces outbound requests to use `endpoints` resolution to determine the final URL for the request.
     *  Yes, an API endpoint to determine which API endpoint to use.  Brillig.
     *  See https://console.product.dev.alertlogic.com/api/endpoints/index.html for more information.
     */
    public useEndpointsResolution() {
        this.useEndpoints = true;
    }

    /**
     *  Enables retry support for all calls managed by this class.
     */
    public enableAutoRetry( maxRetryCount:number = 3 ) {
        this.maxRetryCount = maxRetryCount;
    }

    /**
     * Convenience accessor for acting user ID
     */
    public get actingUserId() {
        return AlSession.getUserId();
    }

    /**
     * Convenience accessor for acting account ID
     */
    public get actingAccountId() {
        return AlSession.getActingAccountId();
    }

    /**
     * Convenience accessor for primary account ID
     */
    public get primaryAccountId() {
        return AlSession.getPrimaryAccountId();
    }

    /**
     *  This is the generic request shortcut.  It creates an instance of the RequestBuilder class with the correct
     *  information and returns it to the caller for completion.
     */
    public request( method:Method, endpoint:string, params?:any ):RequestBuilder {
        let requestBuilder = new RequestBuilder( this, endpoint, method, params );
        if ( this.useEndpoints ) {
            requestBuilder.useEndpointsResolution();
        }
        return requestBuilder;
    }

    /**
     *  A shortcut for the HTTP GET command.
     */
    public get( endpoint:string, responseTransformer:ResponseTransformer = null, params?:any ) : Observable<any> {

        return this.request( "GET", endpoint, params )
                    .transform( responseTransformer || this.defaultResponseTransformer )
                    .execute();

    }

    /**
     *  A shortcut for the HTTP PUT command.
     */
    public put( endpoint:string, data:any, responseTransformer:ResponseTransformer = null ) : Observable<any> {

        return this.request( "PUT", endpoint )
                    .data( data )
                    .transform( responseTransformer || this.defaultResponseTransformer )
                    .execute();
    }

    /**
     *  A shortcut for the HTTP POST command.
     */
    public post( endpoint:string, data:any, responseTransformer:ResponseTransformer = null, params?:any ) : Observable<any> {

        return this.request( "POST", endpoint, params )
                    .data( data )
                    .transform( responseTransformer || this.defaultResponseTransformer )
                    .execute();

    }

    /**
     *  A shortcut for the HTTP DELETE command.
     */
    public delete( endpoint:string, responseTransformer:ResponseTransformer = null ) : Observable<any> {

        return this.request( "DELETE", endpoint )
                    .transform( responseTransformer || this.defaultResponseTransformer )
                    .execute();

    }

    private defaultResponseTransformer = ( response:AxiosResponse ) => {
        return response.data;
    }

    public objectToURLPath( params:any, separator: string = '/', joiner: string = '/' ):string {
        let URLPathString = Object.keys( params ).map( key => key + separator + params[key]).join(joiner);
        return encodeURI( URLPathString );
    }
}

/**
 *--------------- Helper Types/Classes -----------------------------------------------
 */

/**
 *  Callback signature for response transformation.
 */
export declare type ResponseTransformer = {(response:AxiosResponse<any>):any};
