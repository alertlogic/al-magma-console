import { Widget as WidgetConfig, TableListConfig, ZeroState, ZeroStateReason } from '@al/ng-visualizations-components';
import { AlEndpointsSummaryData, AlEEPMappingDictionary } from '@al/endpoints';

interface SummaryResponse {
  summary: AlEndpointsSummaryData;
}

export const topMalwareAttackTypes = (responses: (SummaryResponse|AlEEPMappingDictionary)[], item?: WidgetConfig): TableListConfig | ZeroState => {
  const attackedTypes = (<SummaryResponse>responses[0]).summary.incidentTypes;
  const mappings = (<AlEEPMappingDictionary>responses[1]).rules;
  const totalAttacks = attackedTypes.map(attack => attack.protectCount + attack.monitoredCount).reduce((a, b) => a + b, 0);
  if (totalAttacks === 0) {
    return {
      nodata: true,
      reason: ZeroStateReason.Zero,
    };
  }

  const dataRows = attackedTypes.map(attackType => {
    const totalAttacksForAttackType = attackType.protectCount + attackType.monitoredCount;
    return {
      name: mappings[attackType.ruleName].name,
      count: totalAttacksForAttackType,
      percent: `${(totalAttacksForAttackType / totalAttacks * 100).toFixed(1)}%`,
      recordLink: {
        search: mappings[attackType.ruleName].name
      }
    };
  }).sort((a, b) =>  (a.count > b.count) ? -1 : 1);

  return {
    headers: [
      { name: 'Malware Attack Type', field: 'name', class: 'left multiline-content' },
      { name: 'Event Count', field: 'count', class: 'right' },
      { name: '% of Total', field: 'percent', class: 'right' }
    ],
    body: dataRows
  };
};
