import { malwareAttacksResponses } from '../malware-attacks-responses.transformation';
import { SummaryResponse, endpointResponse } from '../../tests/mocks/endpoint.mocks';
import { ZeroStateReason } from '@al/ng-visualizations-components';

describe('Transformation Test Suite: Malware Attacks Responses', () => {
  describe('when a response breakdown is returned containing status items with non zero values', () => {
    it('should build a chart config object', () => {
      const response: SummaryResponse = Object.assign({},
        endpointResponse, {
        summary: {
          responseBreakdown: {
            isolated: 0,
            unresolved: 50,
            quarantined: 50,
            overridden: 0
          }
        }
      });
      expect(malwareAttacksResponses(response)).toEqual({
        series: [{
          data: [{
            name: 'Unresolved',
            value: 50,
            className: 'critical',
            y: 50,
            percent: '50%',
            recordLink: {
              filter: 'UNRESOLVED'
            }
          },{
            name: 'Quarantined',
            value: 50,
            className: 'low',
            y: 50,
            percent: '50%',
            recordLink: {
              filter: 'QUARANTINED'
            }
          }]
        }]
      });
    });
    describe('when a response breakdown is returned containing a non zero isolated status key', () => {
      it('should not include an "Isolated: named data element in the series for the built chart config object', () => {
        const response: SummaryResponse = Object.assign({},
          endpointResponse, {
          summary: {
            responseBreakdown: {
              isolated: 4,
              unresolved: 0,
              quarantined: 0,
              overridden: 12
            }
          }
        });
        expect(malwareAttacksResponses(response)).toEqual({
          series: [{
            data: [{
              name: 'Overridden',
              value: 12,
              className: 'medium',
              y: 12,
              percent: '100%',
              recordLink: {
                filter: 'OVERRIDDEN'
              }
            }]
          }]
        });
      });
    });
  });


  it('should return a Zero state object when the total of all response breakdown items is zero', () => {
    const response: SummaryResponse = Object.assign({},
      endpointResponse, {
      summary: {
        responseBreakdown: {
          isolated: 0,
          unresolved: 0,
          quarantined: 0,
          overridden: 0
        }
      }
    });
    expect(malwareAttacksResponses(response)).toEqual({
      nodata: true,
      reason: ZeroStateReason.Zero
    });
  });
});
