import { Widget as WidgetConfig, ZeroState, ZeroStateReason } from '@al/ng-visualizations-components';
import { AlEndpointsSummaryData } from '@al/endpoints';
import { camelCaseToWords } from '../transformation.utilities';

interface SummaryResponse {
  summary: AlEndpointsSummaryData;
}

export const malwareAttacksResponses = (response: SummaryResponse, item?: WidgetConfig) => {
  // Copy the data we need
  const data = Object.assign({}, response.summary.responseBreakdown);
  if(data.hasOwnProperty('isolated')) {
    delete data.isolated;
  }
  const total = Object.values(data).reduce((a, b) => a + b);
  const order = ['Unresolved', 'Overridden', 'Quarantined'];
  const cssClassNamesMap = {
    unresolved: 'critical',
    overridden: 'medium',
    quarantined: 'low'
  };

  if (total === 0) {
    return {
      nodata: true,
      reason: ZeroStateReason.Zero
    };
  }
  const keys = Object.keys(data);
  // Build the config and filter out all 0 (zero) values
  const config = keys.map(item => {
    const responseType = camelCaseToWords(item);
    return {
      name: responseType,
      value: data[item],
      className: cssClassNamesMap[item],
      y: data[item],
      percent: `${Math.round((data[item] / total)  * 100)}%`,
      recordLink: {
        filter: responseType.toUpperCase().replace(' ', '_')
      }
    };
  }).filter(item => item.y > 0);

  const seriesData = order.map(item => {
    return config.find(confItem => confItem.name === item || undefined);
  }).filter(item  => item !==  undefined);

  return {
    series: [{
      data: seriesData
    }]
  };
};
