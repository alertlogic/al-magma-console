import { BaseColumnConfig } from '../base_objects.transformation';

export enum Severities {
  Info,
  Low,
  Medium,
  High
}

export interface ExposuresSummary {
  deploymentId: string;
  deploymentName: string;
  severitySummary: { key: number, value: number }[];
  total?: number;
  severities?: {
    '3': number;
    '2': number;
    '1': number;
    '0': number;
  };
}

const buildRecordLink = (severity: string, deploymentId: string): { [p: string]: string } => {
  return {
    severity: severity,
    deployment_id: deploymentId
  };
};

/**
 * mostVulnerableDeploymentsBI transformation
 * kalm: dashboards_deployment_vulnerabilities
 * @param response - raw data from API
 */
export const mostVulnerableDeploymentsBI = (response: { rows: any[][], column_info: { type: string, name: string } }) => {
  enum Column {
    AccountId,
    DeploymentId,
    DeploymentName,
    Severity,
    VulnerabilityCount
  }
  const deployments = response.rows;
  let exposures: ExposuresSummary[] = [];

  deployments.forEach(deployment => {
    const deploymentFound: number = exposures.findIndex(item => item.deploymentId === deployment[1]);
    if (deploymentFound === -1) {
      exposures.push({
        deploymentId: deployment[Column.DeploymentId],
        deploymentName: deployment[Column.DeploymentName],
        severitySummary: [
          {
            key: deployment[Column.Severity],
            value: deployment[Column.VulnerabilityCount]
          }
        ]
      });
    } else {
      exposures[deploymentFound].severitySummary.push({
        key: deployment[Column.Severity],
        value: deployment[Column.VulnerabilityCount]
      });
    }
  });

  const config: BaseColumnConfig = {
    series: [
      {
        name: 'Info',
        data: [],
        className: 'info',
        legendIndex: 3
      },
      {
        name: 'Low',
        data: [],
        className: 'low',
        legendIndex: 2
      },
      {
        name: 'Medium',
        data: [],
        className: 'medium',
        legendIndex: 1
      },
      {
        name: 'High',
        data: [],
        className: 'critical',
        legendIndex: 0
      }
    ]
  };

  /**
   * Generates the severities object witch each severity level
   * @param data - severitySummary data from the exposure item
   */
  const generateSeverities = (data) => {
    const high = data.find(item => item.key === Severities.High);
    const medium = data.find(item => item.key === Severities.Medium);
    const low = data.find(item => item.key === Severities.Low);
    const info = data.find(item => item.key === Severities.Info);
    return {
      '3': high ? high.value : 0,
      '2': medium ? medium.value : 0,
      '1': low ? low.value : 0,
      '0': info ? info.value : 0,
    };
  };

  /**
   * Sort the exposures by severity level DESC (3 levels - high, medium, low, info)
   * if the whole level count is zero then sort by the next lower severity
   * @param data - exposures summary array
   */
  const sortSeverities = (data: ExposuresSummary[]): ExposuresSummary[] => {
    let response = [];
    for (let index = 3; index >= 0; index--) {
      let severityTotal = 0;
      data.forEach(element => {
        severityTotal += element.severities[index.toString()];
      });
      if (severityTotal !== 0) {
        response = data.sort((a, b) => b.severities[index.toString()] - a.severities[index.toString()]);
        break;
      }
    }
    return response;
  };

  // Get severity count total
  const reducer = (accumulator, currentValue): number => accumulator + currentValue;
  exposures.forEach(item => {
    item.severities = generateSeverities(item.severitySummary);
    item.total = item.severitySummary.map(severity => severity.value).reduce(reducer);
  });

  // Sort by severity level DESC (high:3, medium:2, low:1, info:0)
  exposures = sortSeverities(exposures);

  exposures.forEach((item, i) => {
    const high = item.severities['3'];
    const medium = item.severities['2'];
    const low = item.severities['1'];
    const info = item.severities['0'];
    const deploymentId = item.deploymentId;
    config.series[3].data.push({ x: i, y: high, recordLink: buildRecordLink('high', deploymentId) });
    config.series[2].data.push({ x: i, y: medium, recordLink: buildRecordLink('medium', deploymentId) });
    config.series[1].data.push({ x: i, y: low, recordLink: buildRecordLink('low', deploymentId) });
    config.series[0].data.push({ x: i, y: info, recordLink: buildRecordLink('info', deploymentId) });
  });
  config.dateOptions = exposures.map(item => item.deploymentName);

  return JSON.parse(JSON.stringify(config));
};
