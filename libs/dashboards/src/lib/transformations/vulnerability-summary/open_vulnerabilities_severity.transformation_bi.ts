import { ZeroStateReason } from '@al/ng-visualizations-components';

enum Column {
  AccountId,
  DeploymentId,
  DeploymentName,
  Severity,
  VulnerabilityCount
}

/**
 * Takes the raw data and sum all the severities by level
 * where info = 0, low = 1, medium = 2 and high = 3
 * and are represented in each position in the response array
 * @param data - rows data from API
 * @returns an array where each position represents a severity level with its count
 */
const processData = (data: any[][]): number[] => {
  const response: number[] = [0,0,0,0];
  data.forEach(element => {
    response[element[Column.Severity]] += element[Column.VulnerabilityCount];
  });
  return response;
};

/**
 * openVulnerabilitiesBySeverityBI transformation
 * kalm: dashboards_deployment
 * @param response - raw data from API
 */
export const openVulnerabilitiesBySeverityBI = (response: { rows: any[][], column_info: { type: string, name: string } }) => {
  const order: string[] = ['Info', 'Low', 'Medium', 'High'];

  if (response.rows.length === 0) {
    return {
      nodata: true,
      reason: ZeroStateReason.Zero
    };
  }

  const data = processData(response.rows);
  const reducer = (accumulator, currentValue): number => accumulator + currentValue;
  const total = processData(response.rows).reduce(reducer);

  // Build the config and filter out all 0 (zero) values
  const config = order.map((item: string, idx: number) => {
    return {
      name: item,
      value: data[idx],
      className: item.toLowerCase() === 'high' ? 'critical' : item.toLowerCase(),
      recordLink: {
        severity: item.toLowerCase()
      },
      y: data[idx],
      percent: `${Math.round((data[idx] / total) * 100)}%`
    };
  }).filter(item => item.value > 0);
  const seriesData = config;
  return {
    series: [{
      data: seriesData
    }]
  };
};
