import { Widget as WidgetConfig, ZeroStateReason } from '@al/ng-visualizations-components';
import * as Transformation from '../open_vulnerabilities_severity.transformation';
import { ExposuresSummary } from '@al/assets-query';

describe('Open vulnerabilities by severity transformation', () => {
  /*
   *
   */
  describe('when there are no results', () => {
    it('should return a zero state reason for no results', () => {
      const response: ExposuresSummary = {
        exposures: [],
        summary: {
          all: 0,
          high: 0,
          medium: 0,
          low: 0,
          info: 0
        }
      };

      const config = Transformation.openVulnerabilitiesBySeverity([response]);
      expect(config).toEqual({
        nodata: true,
        reason: ZeroStateReason.Zero
      });
    });
  });

  /*
   *
   */
  describe('when there are results', () => {
    let baseResponse: ExposuresSummary;
    let baseConfig: any = {};

    beforeEach(() => {
      baseResponse = {
        exposures: [],
        summary: {
          all: 4,
          high: 1,
          medium: 1,
          low: 1,
          info: 1
        }
      };

      baseConfig = [
        { name: 'High', value: 1, className: 'critical', recordLink: { severity: 'high'}, y: 1, percent: '25%' },
        { name: 'Medium', value: 1, className: 'medium', recordLink: { severity: 'medium'}, y: 1, percent: '25%' },
        { name: 'Low', value: 1, className: 'low', recordLink: { severity: 'low'}, y: 1, percent: '25%' },
        { name: 'Info', value: 1, className: 'info', recordLink: { severity: 'info'}, y: 1, percent: '25%' },
      ];
    });

    it('should pass back the expected config', () => {
      const config = Transformation.openVulnerabilitiesBySeverity([baseResponse]);
      expect(config).toEqual({
        series: [{
          data: baseConfig
        }]
      });
    });
  });
});
