import { ZeroStateReason } from '@al/ng-visualizations-components';
import { BaseColumnConfig } from '../base_objects.transformation';
import { SeverityCountSummaries, ThreatLevelCountSummary } from '../kalm.named_query_response.types';
import { kalmDateStringToJSDate, getLocalShortDate } from '../transformation.utilities';

enum Column {
  Date,
  ThreatCountSummary
}

const generateSeries = (type: string, data: SeverityCountSummaries) => {
  const rows = data.rows;
  return rows.map((item, idx) => {
    const totalVulns = Object.values(<ThreatLevelCountSummary>item[1]).reduce((a, b) => a + b);
    const dataItemValue = item[1][type] || 0;
    return {x: idx, y: dataItemValue, percentage: Math.round((dataItemValue / totalVulns)  * 100)};
  });
};

export const vulnerabilityTrend = (response: SeverityCountSummaries) => {

  if (response.rows.length === 0) {
    return {
      nodata: true,
      reason: ZeroStateReason.Zero
    };
  }

  const dates: string[] = [];
  response.rows.forEach((row) => {
    const parsedDate: Date  = kalmDateStringToJSDate(row[Column.Date] as string);
    dates.push(getLocalShortDate(parsedDate));
  });
  const rowsAsString: string = JSON.stringify(response.rows);
  const config: BaseColumnConfig = {
    title:  '',
    description: 'Count of Vulnerabilities',
    dateOptions: dates,
    series: [{
      name: 'Info',
      data: generateSeries('Info', response),
      className: 'info',
      legendIndex: 3
    }, {
      name: 'Low',
      data: generateSeries('Low', response),
      className: 'low',
      legendIndex: 2
    }, {
      name: 'Medium',
      data: generateSeries('Medium', response),
      className: 'medium',
      legendIndex: 1
    }, {
      name: 'High',
      data: generateSeries('High', response),
      className: 'critical',
      legendIndex: 0
    }].filter(item => {
      return (new RegExp(item.name)).test(rowsAsString);
    })
  };

  return JSON.parse(JSON.stringify(config));
};
