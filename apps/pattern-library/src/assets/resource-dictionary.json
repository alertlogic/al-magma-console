{
    "readme/projects/ng-navigation-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-navigation-components --save\n\nIn your modules import in the library\n\n```\nimport { NgNavigationModule } from '@al/ng-navigation-components';\n```\nand finally in the html start using the components\n\n",
    "readme/al-login/README": "# AlLoginBaseComponent Usage\n\n## Summary\n\nThe AlLoginBaseComponent provides a general purpose authentication interface that is backend-agnostic (that is, any user/password authentication scheme can be used).\nsingle utility component with a public API.\n\n## Basic Usage\n\nEmbed the component into your view template in the customary way:\n\n```\n<al-login-base [useBackground]=\"expression indicating whether or not to show the background splash screen, which is perdy\"\n                (authenticate)=\"handler for authentication event\">\n</al-login-base>\n```\n\n\n",
    "readme/al-protected-content/README": "# al-protected-content\n\n## Overview\n\nThe `al-protected-content` component allows application authors to easily protect views or view elements from accounts who are not entitled to see them.\nIt also provides functionality to automatically redirect to a more appropriate route when the acting account changes, show a zero state in the event the current user is unentitled, or redirect to a default route in the case the current user is unentitled.\n\n## Basic Usage\n\n```\n<al-protected-content entitlement=\"cloud_defender\">\n    Content for entitled view\n    <div class=\"inaccessible\">\n        Only unentitled viewers will see this.\n    </div>\n</al-protected-content>\n```\n\nThe `entitlement` attribute can be any valid entitlement expression (e.g., `\"cloud_insight&!active_watch_premier|web_security_managed\"`) or array of entitlement expressions.\nIt can also be a named entitlement group (e.g., `\"EntitlementGroup.Incidents\"`) or one of two special string constants.\n\n* `\"*\"` This expression is always evaluated as true, so that the content will always be displayed (unless other conditions are applied).\n* `\"@schema\"` This constant will cause the component to interrogate the currently activated route (according to AlNavigationService) and its ancestors for a valid entitlement expression.  Please note that this shorthand has _significant_ limitations when dealing with routes with complex, compound, or negated visibility conditions.\n\n_Best Practice_: Embed your entitlement expression or group directly into your component's markup instead of storing it in a public property on your component.  This makes it easier to tell when and how the component should work from its markup.\n\n## Events\n\n`al-protected-content` emits three events under normal usage conditions.\n\n`onHide` emits `void` when the current account's entitlements do NOT allow the acting user to view the entitled content, before it is hidden (or at initialization time).\n\n`onDisplay` emits `void` when the current account's entitlements DO allow the acting user to view the entitled content, before it is displayed.\n\n`unentitled` emits the current entitlements when the current account has been determined to be ineligible to view the protected content.  These entitlements take the form of an `EntitlementCollection` instance, which can be used to determine the best place to redirect to, for instance.\n\nLast but not least, `onAccountChange` emits the acting account whenever the account changes, its metadata has been successfully resolved, AND it is entitled to view the content.  For components that are interested only in reloaded their data when the acting account changes, this simplifies the process of listening for account changes to something as simple as\n\n```\n    <al-protected-content (onAccountChange)=\"reload($event)\">\n        View of account data here\n    </al-protected-content>\n```\n\n#### Example\n\nComponent HTML:\n\n```\n<al-protected-content [entitlement]=\"'EntitlementGroup.CloudInsightOnly'\"\n                    (onDisplay)=\"beforeShowContent()\"\n                    (onHide)=\"beforeHideContent()\"\n                    (unentitled)=\"onUnentitledAccess($event)\">\n    Na nah, you can't see me without the right entitlements!\n\n    <em>{{notice}}</em>\n</al-protected-content>\n```\n\nComponent TS:\n\n```\n    public onDisplay() {\n        console.log(\"Showing protected content\" );\n        this.notice = \"I will be populated before the content displays.\";\n    }\n\n    public onHide() {\n        this.notice = null;     //  whatever \n    }\n\n    public onUnentitledAccess( entitlements:EntitlementCollection ) {\n        if ( this.navigation.evaluateEntitlement(\"log_manager|threat_manager\", entitlements ) ) {\n            this navigation.route( [ 'some', 'other', 'route' ] );\n        } else {\n            this navigation.route( [ 'some', 'other', 'other', 'route' ] );\n        }\n    }\n```\n\nIn this example, the onDisplay event is used to calculate a property before the inner content is destroyed, clean it up when the current viewer is unentitled, and redirect to an alternative location based on the user's entitlements when the unentitled case is detected.\n\n## Account Change Handling\n\nMost applications with account-specific views will want to automatically reroute the current view to reference the newly activated account when it changes, or redirect to a default/\"detector\" route (typically '/') when the newly activated account is not entitled to access the current view.\nThe `al-protected-content` component supports both of these common use cases with the @Input(s) `accountChangeRoute` and `unentitledRoute`.\n\nBoth `accountChangeRoute` and `unentitledRoute` can be assigned a boolean, string, or array of strings.  \nWhen the acting account changes, IF the new account is entitled to view the inner content based on the `entitlement` attribute, then `al-protected-content` will redirect to the given route.  \nIf `accountChangeRoute` is a boolean, the component will attempt to redirect to the current view, replacing the old account ID with the new one.  \nIf `accountChangeRoute` is a string, it will be treated as a route literal.\nIf `accountChangeRoute` is a string[], it will be treated as an array of route segments.\n\n#### Examples\n\n```\n<al-protected-content entitlement=\"threat_manager\"\n\t\t\t\t\t\t [accountChangeRoute]=\"true\"\n\t\t\t\t\t\t [unentitledRoute]=\"true\">\n\t<div>My Content Lives Here</div>\n</al-protected-content>\n```\n\nThe above example will display \"My Content Lives Here\" if the current account has the \"threat_manager\" entitlement.\n\nIf the acting account changes to another account that has the threat_manager entitlement, the component will redirect the application to the *same* route with the old acting account ID replaced with the new one.\n\nIf the acting account changes to an account without the threat_manager entitlement, it will redirect to the default unentitled route -- '/'.\n\n```\n<al-protected-content entitlement=\"log_manager|cloud_insight\"\n\t\t\t\t\t\t [accountChangeRoute]=\"['kevin', 'was', 'here', ':accountId' ]\"\n\t\t\t\t\t\t unentitledRoute=\"/unacceptable/:accountId\">\n    <!-- State Seekrets Here -->\n</al-protected-content>\n```\n\nIn the above example, state secrets will be shown to accounts with log manager or cloud insight entitlements.  If the account changes to an account with those entitlements, the app will be routed to '/kevin/was/here/(account ID)'.  Otherwise, it will be routed to '/unacceptable/(account ID)'.\n\n*Note* that the component does not need to be used with both route inputs at once.  Either can be used in isolation, if the client wishes to show a zero state or not modify the route when the account changes.\n",
    "readme/al-protected-content-ex/README": "# al-protected-content-ex\n\n## Overview\n\nThe `al-protected-content-ex` component allows component authors to easily protect views or view elements from users that are not allowed to see them, based on a variety of criteria.\n\n## Usage\n\n```\n<al-protected-content-ex [entitlements]=\"'entitlement expression or array of entitlement expressions'\"\n                         [primaryEntitlements]=\"'entitlement expression to be applied to primary account entitlements'\"\n                         [environments]=\"'allowed environment IDs'\"\n                         [experiences]=\"'allowed experiences'\"\n                         [authentication]=\"'boolean, indicating whether the user must be authenticated or unauthenticated to see the content'\"\n                         [requiresDefender]=\"'boolean, indicating the interior content requires a defender session to execute as expected.'\"\n                         [verbose]=\"boolean\"\n                         [unavailableTemplate]=\"templateRef\"\n                         (onAccountChange)=\"convenience event to indicate when the acting account has changed.\"\n                         (onDisplay)=\"event that fires when the content is shown\"\n                         (onHide)=\"event that fires when the content is hidden\"\n                         (onDisallowed)=\"event that fires when a criteria mismatch is detected\">\n    Content for entitled view\n    <div unavailable>\n        Only users who do not meet the block's view criteria will see this, and only if an `unavailableTemplate` input isn't specified.\n    </div>\n</al-protected-content-ex>\n```\nThe protection criteria inputs are:\n\n- `entitlements` Can be a string entitlement expression, array of string entitlement expressions, a reference to an EntitlementGroup, or one of the two special constants `*` and `@schema`.  If present, these are evaluated against the entitlements of the _acting account_.  If the user is not authenticated, this will fail with `disallowedCriteria` = `'authentication'`.  `*` indicates any entitlement, and `@schema` indicates the entitlement requirements should be extracted from the current route by introspecting the navigational metadata for an activated route tree with conditions.\n- `primaryEntitlements` This behaves identically to `entitlements` except it is evaluated against the entitlements of the _primary_ account.\n- `environments` A string (or array of strings) indicating which environments the protected content is allowed to be displayed in.\n- `experiences` A string (or array of strings) indicating which navigational experiences ts the protected content is allowed to be displayed in.\n- `authentication` A boolean value indicating whether or not the user must be authenticated (`true`) or unauthenticated (`false`) to see the given content.  Please note that using `entitlements` or `primaryEntitlements` both imply an `[authentication]=\"true\"` criteria.\n- `requiresDefender` A boolean value.  If true, indicates that a defender session to the contextually relevant defender datacenter must be established before the content can be shown.\n\nIf all of the criteria for the protected content block are met, the `onShow` event emitter will be triggered, and the inner content will be displayed.\n\nIf all of the criteria for the protected content block are not met:\n- The `onHide` event will trigger\n- The `onDisallowed` event will trigger with a reference to an object containing `disallowedReason`, `disallowedCriteria`, and a `redirect` method that can be used to navigate away from the current route.\n- The inner content will be hidden.  \n    - If a template is provided via the `unavailableTemplate` input, then that template will be rendered inside the component.\n    - If a template is NOT provided, the first element with attribute `[unavailable]` will be projected into the component.\n\n_Best Practice_: Embed your entitlement expression or group directly into your component's markup instead of storing it in a public property on your component.  This makes it easier to tell when and how the component should work from its markup.\n\n_Best Practice_: Redirecting between components based on entitlements should be avoided in general, because redirection chains do not scale gracefully without a great deal of coordinated effort.  Rather than redirecting, project a reasonable zero state and provide a link to a better location.  You should only call the `redirect()` method in the `onDisallowed()` event handler under special circumstances.\n\n## Other Events\n\nIf the criteria are met and the acting account changes, the `onAccountChange` emitter will be triggered with a reference to the new acting account.  This event will be emitted on the intial view, as well.\n\n## Examples\n\n### Example 1: Basic Usage\n\nComponent HTML:\n\n```\n<al-protected-content-ex [entitlements]=\"'EntitlementGroup.CloudInsightOnly'\"\n                    (onDisplay)=\"beforeShowContent()\"\n                    (onHide)=\"beforeHideContent()\">\n\n    Na nah, you can't see me without the right entitlements!\n\n    <em>{{notice}}</em>\n    <div unavailable>\n        Put a zero state here\n    </div>\n</al-protected-content-ex>\n```\n\nComponent TS:\n\n```\n    public onDisplay() {\n        //  This will be invoked before the content is displayed\n        this.notice = \"Greetings, person with the Cloud Insight entitlement!\";\n    }\n\n    public onHide() {\n        //  This will be invoked before the content is hidden (if it was ever accessible to begin with)\n        this.notice = null;\n    }\n```\n\n### Example 2: Using Account Change Notifications\n\nComponent HTML:\n\n```\n<al-protected-content-ex (onAccountChange)=\"reloadViewForAccount($event)\">\n    This is my inner content!  Since no criteria are provided, this content will _always_ be shown. \n</al-protected-content-ex>\n```\n\nComponent TS:\n\n```\n    public reloadViewForAccount( account:AIMSAccount ) {\n        this.initializeView( account.id );\n    }\n```\n\n### Example 3: Redirecting\n\nComponent HTML:\n\n```\n<al-protected-content-ex [entitlements]=\"'Some entitlement that doesn't exist'\"\n                    (onDisallowed)=\"onAccessRejected($event)\">\n\n    Hypothetically, this content can never be displayed because its entitlement requirement are fundamentally gibberish.\n\n</al-protected-content-ex>\n```\n\nComponent TS:\n\n```\n    public onAccessRejected( rejection:AlContentUnavailable ) {\n        console.log(\"Access rejected because of \" + rejection.disallowedReason, rejection.disallowedCriteria );\n        if ( false ) {\n            //  Ordinarily, you shouldn't do this -- but you can if you need to\n            rejection.redirect( \"https://lmgtfy.com/?q=no+way+jose\" );\n        }\n    }\n```\n\n### Example 4: Using Navigation Metadata and Debugging\n\nComponent HTML:\n\n```\n<al-protected-content-ex [entitlements]=\"@schema\"\n                         [rerouteActingAccount]=\"true\"\n                         [verbose]=\"true\">\n</al-protected-content-ex>\n```\n\nThis example requires no code-behind to work.\n\n`[entitlements]=\"@schema\"` will infer which route you are on from the loaded navigational schematics, and determine the entitlement criteria applied to that route (and its ancestors). For example, if you are inside a view in the Health application without any more specific entitlements (like [this one](https://algithub.pd.alertlogic.net/defender/ui-metadata/blob/master/navigation-schemas/siemless/primary.json#L52)), the component will automatically retrieve the entitlement expression `\"assess|detect|respond|tmpro|lmpro\"` and apply those to the entitlements criteria.\nAlternatively, if you are using this component inside a view within [this route](https://algithub.pd.alertlogic.net/defender/ui-metadata/blob/master/navigation-schemas/cie-plus2/sidenav.overview.json#L68), it will automatically apply a criteria of `[entitlements]=\"EntitlementGroup.ThreatManager\"`.  Easy!\n\n`[rerouteActingAccount]=\"true\"` will automatically apply route changes, based on the same navigational metadata it uses to determine `@schema` based entitlement criteria.  Borrowing the last example above (the defender scans path in the overview application), when the acting account changes, the route's URL will be recalculated accordingly, and the user will automatically be redirected to the appropriate route for the newly selected account.\n\nLast but not least, `[verbose]=\"true\"` will turn on extra logging around evaluation cycles and show/hide logic.  This should help you figure out why the component is behaving in the way it does.\n\n### Example 5: Requiring A Defender Session\n\nSome views require a defender session to be ready and initialized in order to work properly.  `al-protected-content-ex` won't create the session for you, but it will wait for one to be ready before displaying its content.\n\nComponent HTML:\n\n```\n<al-protected-content-ex [requiresDefender]=\"true\"\n\t\t\t\t\t\t\t(onDisplay)=\"loadConvergenceData()\">\n    <em>Inner Content</em>\n</al-protected-content-ex>\t\n```\n\nComponent TS:\n\n```\npublic loadConvergenceData() {\n    // Muhahaha!  I can safely request data from convergence APIs from this method.\n}\n```\n\n",
    "readme/projects/ng-forms-components/README": "# NgFormsComponents\n\nThis library was generated with [Angular CLI](https://github.com/angular/angular-cli) version 7.2.0.\n\n## Code scaffolding\n\nRun `ng generate component component-name --project ng-forms-components` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module --project ng-forms-components`.\n> Note: Don't forget to add `--project ng-forms-components` or else it will be added to the default project in your `angular.json` file. \n\n## Build\n\nRun `ng build ng-forms-components` to build the project. The build artifacts will be stored in the `dist/` directory.\n\n## Publishing\n\nAfter building your library with `ng build ng-forms-components`, go to the dist folder `cd dist/ng-forms-components` and run `npm publish`.\n\n## Running unit tests\n\nRun `ng test ng-forms-components` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n",
    "readme/al-dynamic-form/README": "# Al Dynamic Form\n\n## Summary\nThe dynamic form is a reusable component that allows create form indicating by json format the elements to show.\n\nThe elements types allowed in the dynamic form are:\n* Input\n* Checkbox\n* Group of checkbox\n* Radio button\n* Textarea\n* Dropdown\n* Monaco editor\n\nAuthors:\n- Juan Camilo Kremer (jkremer@alertlogic.com)\n- Maryit Sanchez (msanchez@alertlogic.com)\n- Andres David Echeverri Jimenez (andres.echeverri@alertlogic.com)\n\n# Examples of use\nng-common-components examples: https://ng-common-components.ui-dev.product.dev.alertlogic.com/#/patterns/form/dynamic\nApplication Registry: https://console.configuration.product.dev.alertlogic.com/#/applications-registry/application-list/134249236?aaid=134249236&locid=defender-us-ashburn\n\n## Especification\n* **type (string)**: Mandatory: Define the type of element to show in the form, possible values:\n  * string/input (Input element)\n  * string/hidden (Input element)\n  * string/radio (Radio button element)\n  * any[]/checkbox (Group of checkbox element)\n  * boolean/checkbox (Checkbox element)\n  * string/dropdown (Dropdown element)\n  * string/monaco-editor (Monaco editor element)\n  * string/textarea (Textarea element)\n  * string[]/textarea (Textarea element)\n  * boolean/inputSwitch (inputSwitch element)\n* **property (string)**: Mandatory: Element id.\n* **label (string)**: Mandatory: Displays the label of the element.\n* **description (string|string[])**: Optional: Information to show in a tooltip.\n* **optional (boolean)**: Optional: Define whether the input or textarea elements are optional, if this property is not set, a required validation is added to the form control and shows a '*' in the label.\n* **validationPattern (string)**: Optional: Validation pattern is added to the formcontrol.\n* **placeholder (string)**: Optional: Display an example of the value in the input element.\n* **options ([{value: string, label: string, disabled?: boolean}])**: Required for Group of checkbox, Dropdown and Radio button, specifies characteristics for the editor.\n* **editorOptions ([{value: string, label: string}])**: Required for Monaco editor, specifies each item in the element.\n* **updateNotAllowed (boolean)**: Optional: indicates whether to the component of the element value can be changed, if the value is true, the element is showing in disabled mode.\n* **defaultValue (string)**: Optional: assigns a default value or in edit case the value saved for the user.\n* **belowDescription (string)**: Optional: add a text below the field.\n* **aboveDescription (string)**: Optional: add a text above the field.\n* **patternError (string)**: Optional: custom error to show if the patter is invalid.\n* **requiredError (string)**: Optional: custom error to show if the field is required.\n\n\n## Implementation\n```ts\ndynamicFormValues = [\n        {\n            \"type\":\"string/input\",\n            \"property\":\"name\",\n            \"label\":\"Integration Name\",\n            \"description\":\"Integration Name\",\n            \"placeholder\": \"\"\n        },\n        {\n            \"type\":\"string/input\",\n            \"property\":\"test\",\n            \"label\":\"Test Name\",\n            \"description\":\"Test Name\",\n            \"placeholder\": \"some placeholder\",\n            \"belowDescription\": \"some below\",\n            \"aboveDescription\": \"some above\",\n            \"requiredError\": \"please fill this\"\n        },\n        {\n            \"validationPattern\":\"^(https)?:\\/\\/\\\\S+\",\n            \"type\":\"string/input\",\n            \"property\":\"target_url\",\n            \"label\":\"Target URL\",\n            \"description\":\"Target URL (for example, https://abc.com)\",\n            \"placeholder\": \"Example: https://abc.com\"\n            \"patternError\": \"the field must start with ABC\",\n        },\n        {\n            \"updateNotAllowed\":true,\n            \"type\":\"string/radio\",\n            \"property\":\"animal\",\n            \"options\":[\n               {\n                  \"value\":\"rabbit\",\n                  \"label\":\"rabbit purple\"\n               },\n               {\n                  \"value\":\"dog\",\n                  \"label\":\"hot dog\"\n               }\n            ],\n            \"label\":\"Animal\",\n            \"description\":\"Animal\",\n            \"defaultValue\":\"rabbit\"\n        },\n        {\n            \"updateNotAllowed\":true,\n            \"type\":\"any[]/checkbox\",\n            \"property\":\"colors\",\n            \"class\":\"form-row\",\n            \"options\":[\n               {\n                  \"value\":\"blue\",\n                  \"label\":\"blue\"\n               },\n               {\n                  \"value\":\"red\",\n                  \"label\":\"red\"\n               },\n            ],\n            \"label\":\"Colors\",\n            \"description\":\"a color\"\n        },\n        {\n            \"type\":\"string/dropdown\",\n            \"property\":\"animal\",\n            \"options\":[\n               {\n                  \"value\":\"rabbit\",\n                  \"label\":\"rabbit purple\"\n               },\n               {\n                  \"value\":\"dog\",\n                  \"label\":\"hot dog\"\n               }\n            ],\n            \"label\":\"Animal\",\n            \"description\":\"Animal\",\n            \"defaultValue\":\"rabbit\"\n        },\n        {\n            \"type\":\"string/monaco-editor\",\n            \"property\":\"template\",\n            \"editorOptions\": {\"theme\": 'vs', \"language\": 'json'},\n            \"label\":\"Payload Template\",\n            \"description\":\"Payload Template\",\n            \"defaultValue\":`{\\n\\t\"summary\": \"{{incident.summany}}\",\\n\\t\"timestamp\": \"21-01-2018\",\\n\\t\"source\": \"alertlogic:test\",\\n\\t\"severity\": \"{{incident.severity}}\"\\n}`\n        },\n   ];\n   public elements: AlFormElementBase<any>[] = [];\n   @ViewChild(\"alDynamicFormComponent\")\n   public dynamicForm: AlDynamicFormComponent;\n\n   ngOnInit(){\n        for(let i=0; i<this.dynamicFormValues.length;i++){\n            let base = AlDynamicFormUtilityService.generateBaseProperties(this.dynamicFormValues[i]);\n            const element:any = AlDynamicFormUtilityService.generateDynamicElement(base, this.dynamicFormValues[i].type);\n            this.elements.push(element);\n        }\n    }\n\n    // Indicated when the form has complete all the validations configured.\n    onDynamicFormChanges(isValid: boolean) {\n        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            validate: isValid,\n        });\n    }\n\n    submitForm() {\n        // Give the result of the form in a json format, if any input or textarea has an empty value it is excluded of the response except in hidden type.\n        let parameters = this.dynamicForm.onSubmit();\n        console.log(parameters);\n    }\n```\n```html\n<al-dynamic-form [elements]=\"elements\" (isValid)=\"onDynamicFormChanges($event)\"></al-dynamic-form>\n```\n",
    "readme/projects/ng-fancy-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-fancy-components --save\n\nIn your modules import in the library\n\n```\nimport { NgFancyModule } from '@al/ng-fancy-components';\n```\nIn your component import the components\n\n```\nimport { AlBetaGetStartedComponent } from '@al/ng-fancy-components';\n```\nand finally in the html\n\n```\n<al-beta-get-started #tutorial></al-beta-get-started>\n```\n",
    "readme/projects/ng-visualizations-components/README": "  @al/ng-common-components\n=========\n### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components powered Alert Logic Angular applications\n\n## Installation\n\n`npm install @al/ng-visualizations-components`\n\n### Setup\n\nRegister the module in your Angular application\n\n````\nimport { NgVisualizationModule } from '@al/ng-visualizations-components';\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    NgVisualizationModule\n  ],\n  providers: [\n    ...\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n````\n",
    "readme/projects/ng-cardstack-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-cardstack-components --save\n\nIn your modules import in the library\n\n```\nimport { NgCardstackModule } from '@al/ng-cardstack-components';\n```\nIn your component import the components\n\n```\nimport { ... } from '@al/ng-cardstack-components';\n```\n\n## Code scaffolding\n\nRun `ng generate component component-name --project ng-cardstack-components` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module --project ng-cardstack-components`.\n> Note: Don't forget to add `--project ng-cardstack-components` or else it will be added to the default project in your `angular.json` file. \n\n## Build\n\nRun `ng build ng-cardstack-components` to build the project. The build artifacts will be stored in the `dist/` directory.\n\n## Publishing\n\nAfter building your library with `ng build ng-cardstack-components`, go to the dist folder `cd dist/ng-cardstack-components` and run `npm publish`.\n\n## Running unit tests\n\nRun `ng test ng-cardstack-components` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n\n",
    "readme/al-base-card/README": "# Al Base Card\n\n## Summary\nThe base card is a reusable component that allows creating from a simple card to a complex card from an object.\n\nAuthors:\n- Andres David Echeverri Jimenez (andres.echeverri@alertlogic.com)\n\n# Examples of use\n\n## Basic use\n\nBasic card for show simple information, this configuration don't allow expand and check.\n\n![Basic use](https://algithub.pd.alertlogic.net/storage/user/735/files/ef84c380-605a-11ea-829e-58986cb8644d)\n\n```ts\npublic alBaseCardBasicItem: AlBaseCardItem = {\n    id: '1',\n    caption: 'Content',\n    subtitle: 'Subtitle'\n};\n```\n```html\n<al-base-card [item]=\"alBaseCardBasicItem\">\n</al-base-card>\n```\n\n\n## Toggleable and custom content use\n\nThe card can be expandable passing an object of configuration, in this case, the card needs a content to show when it is expanded, this content can be pass-through of ng-template.\n\n***Note:*** The toggle button can be false and the card will be expand by clicking on the content.\n\n![Toggeable card](https://algithub.pd.alertlogic.net/storage/user/735/files/a2552180-605b-11ea-85c1-05e602a06fba)\n\n\n```ts\npublic alBaseCardConfig: AlBaseCardConfig = {\n        toggleable: true, // Allow expand and collapse the card\n        toggleableButton: true, // Show the expandable and collapsible button on the rigth side\n        checkable: false,\n        hasIcon: false,\n};\n\npublic alBaseCardBasicItem: AlBaseCardItem = {\n    id: '1',\n    toptitle: 'Top Title', \n    caption: 'Content',\n    subtitle: 'Subtitle'\n};\n```\n```html\n<al-base-card [config]=\"alBaseCardConfig\"\n              [item]=\"alBaseCardBasicItem\">\n    <!-- A directive that referece the body content when the card is expanded -->\n    <ng-template alBaseCardBodyContent>\n        Hello Alert Logic!\n    </ng-template>\n</al-base-card>\n```\n\n## Footer Actions and checkable\n\nThe card allows establishing footer actions that can be put in right and left side.\n\n***Note:*** Other option is pass a footer custom template, the directive for this is ```alBaseCardFooter```.\n\n![checkable card](https://algithub.pd.alertlogic.net/storage/user/735/files/8ef68600-605c-11ea-923e-b915a8a9848a)\n\n```ts\nimport { alEditDeleteFooterActions } from '@al/ng-cardstack-components';\n\npublic alBaseCardConfig: AlBaseCardConfig = {\n    toggleable: true,\n    toggleableButton: true,\n    checkable: true, // Shows a checkbox on the left side \n    hasIcon: false,\n};\n\npublic alBaseCardFooterButtons: AlActionFooterButtons = {\n    event: 'download', // Allows to identify the event\n    icon: 'get_app', // Icon name (material icons)\n    visible: true, // Allows to show or hide the button\n    text: \"DOWNLOAD\" // Allows to set the text\n};\n\npublic alBaseCardFooterActions: AlBaseCardFooterActions = {\n    left: [this.alBaseCardFooterButtons],\n    right: alEditDeleteFooterActions // Default edit and delete actions\n};\n\npublic alBaseCardItem: AlBaseCardItem = {\n    id: '1',\n    toptitle: 'Title',\n    caption: 'Content',\n    subtitle: 'Subtitle',\n    expanded: false,\n    footerActions: this.alBaseCardFooterActions\n};\n\npublic footerAction(event: AlBaseCardFooterActionEvent) {\n    console.log(event.name, event.value);\n}\n```\n\n```html\n<al-base-card [config]=\"alBaseCardConfig\"\n              [item]=\"alBaseCardItem\"\n              (onFooterAction)=\"footerAction($event)\">\n    <ng-template alBaseCardBodyContent>\n        Hello Houston!\n    </ng-template>\n</al-base-card>\n```\n\n## With icon and item count\n\nShows an icon on the left side.\n\n![icon card](https://algithub.pd.alertlogic.net/storage/user/735/files/5c00c200-605d-11ea-8f80-1cd494b8bd5e)\n\n```ts\npublic alBaseCardConfigIcon: AlBaseCardConfig = {\n    toggleable: true,\n    toggleableButton: true,\n    checkable: true,\n    hasIcon: true, // Allows to show an icon on the left side\n};\n\npublic alBaseCardItemCount: AlItemCount = {\n    number: 135,\n    text: 'Items'\n};\n\npublic alBaseCardIconItem: AlBaseCardItem = {\n    id: '1',\n    icon: { name: 'date_range', text: 'Daily' }, // The text property can be optional\n    // icon { cssClassNames: 'fa fa-circle risk-critical' } - use this property if you want to display a non material icon, e.g fontawesome\n    // icon: { name: 'error', text: 'Error', cssClassNames: 'risk-critical } - can also apply additional css rules to the default material iconset, e.g. colour classes\n    toptitle: 'Title',\n    caption: 'Content',\n    subtitle: 'Subtitle',\n    expanded: false,\n    footerActions: this.alBaseCardFooterActions,\n    countItems: [this.alBaseCardItemCount],\n};\n\n\n\n```\n# With icon without checkbox\n\nShows an icon on the left side and disables the checbox to avoid the selection of the card.\n\n```ts\npublic alBaseCardConfigIcon: AlBaseCardConfig = {\n    toggleable: true,\n    toggleableButton: true,\n    checkable: false, // Avoids the checkbox.\n    hasIcon: true, // Allows to show an icon on the left side\n};\n\n\n\npublic alBaseCardIconItem: AlBaseCardItem = {\n    id: '1',\n    icon: { name: 'date_range', text: 'Daily' },\n    toptitle: 'Title',\n    caption: 'Content',\n    subtitle: 'Subtitle',\n    expanded: false\n};\n\n```\n\n## Customizable templates\n\nIn some cases, the default view that the card implements is not what it wants to reflect, in these cases it's possible pass a ```ng-template``` with some of the following directives:\n\n* ```alBaseCardHeader```\n* ```alBaseCardIcon```\n* ```alBaseCardTitle```\n* ```alBaseCardCaption```\n* ```alBaseCardSubtitle```\n* ```alBaseCardHeaderRight```\n* ```alBaseCardHeaderExtraContent```\n* ```alBaseCardBodyContent```\n* ```alBaseCardFooter```\n\n***Note:*** If any of these directives are used, the default view will be omitted for each section.\n\n***Important:*** All directives have attached the context of the item.\n\n### Example\n\n```html\n<al-base-card [config]=\"alBaseCardConfig\"\n              [item]=\"alBaseCardItem\">\n    <!-- let-item allows access to the item -->\n    <ng-template alBaseCardHeader let-item>\n        Custom Header {{ item | json }}\n    </ng-template>\n    <ng-template alBaseCardBodyContent let-item>\n       Custom Body\n    </ng-template>\n</al-base-card>\n```\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| item |```AlBaseCardItem ```     |```undefined```        | An object with the information to be painted          |\n|footerActions       |```AlBaseCardFooterActions```      | ```undefined```         | An object that allows establishing the footer buttons         |\n|config       |```AlBaseCardConfig```      | All options are false       | initial card setup              |\n|checked       |```boolean```      |```false```         |Allows to change the checkbox state             |\n\n## Outputs\n  \n| Name | Parameters | Description |\n|--|--|--|\n| onChangeChecked | ```AlBaseCardItem``` | Emit an event when the checkbox state change |\n| onFooterAction | ```AlBaseCardFooterActionEvent``` | Emit an event when user clicks on button footer action. |\n\n## Classes for alBaseCardBodyContent\n\n**Card Body Headers**\n* First Header\n```html\n  <h2 class=\"first\">Card Body Title<h2>\n```\n* All Other Headers\n```html\n  <h2>Card Body Title<h2>\n```\n\n**Card Body Labels**\n```html\n  <div class=\"label\">Label</div>\n```\n**Card Body Descriptions**\n```html\n  <div class=\"desc\">Description</div>\n```\n\n\n",
    "readme/al-cardstack/README": "# Using Cardstack\n\n## How to Implement a Cardstack\n\nThe basic ingredients of a cardstack are reasonably straightforward.  The component assumes that you will be retrieving the base data for the view from an API or other external source, and that the data may not lend itself directly to user-friendly display (e.g., accounts and users are represented as IDs instead of names, types are codes instead of user friendly captions, etc).\nTowards that end, it provides an abstraction layer on top of whatever underlying data representation you end up using.\n\n### Ingredient #1: Entity Model\n\nBecause the underlying data model may be obfuscated or distributed across multiple systems, cardstack requires the use of a display-specific view model.  This should be a simple interface (or class) that implements\n`AlCardstackItemProperties` ( [see here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/types.ts#L154) for reference ).  Essentially, this model *must* expose an `id` and a `caption` property, and\nshould also include any other properties that can be searched, filtered on, grouped by, or sorted upon.  Properties should be simple scalar values (or arrays of scalar values), and don't need to worry about human readability -- account IDs \nand entity IDs are fine, and user-friendliness is implemented in the next step.\n\nTo see how the underlying entity data is converted into the simplified property model, see Ingredient #3c: Property Extraction.\n\n*TODO: example property interfaces*\n\n### Ingredient #2: View Characteristics\n\nIndividual views have a lot of different requirements around pagination, filtration, API calls, and filter rules.  Some of these may be dynamic or come be retrieved from APIs.  Towards this end, each view requires (as an input) an `AlCardstackCharacteristics`\ninterface (see [here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/types.ts#L78) for reference) that defines which properties can be sorted, searched, filtered, or grouped, and what their human friendly captions are.\nSome of these can be calculated dynamically or autodiscovered from the data.\n\n*TODO: example characteristics*\n\n### Ingredient #3: View Class\n\nThe actual view state of a cardstack is managed by an instance of a class that extends `AlCardstackView` ( [see here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/al-cardstack-view.ts#L13) for reference ) and provides\na a specific entity type (whatever comes from the underlying data layer) and the property DTO defined in step 1.  The underlying `AlCardstackView` class does most of the work of of maintaining the view state, but each implementation\nof `AlCardstackView` must provide at least two function overrides and may further customize the behavior of the view by providing some optional methods as well.\n\n#### Ingredient #3a: Characteristics Generator (optional)\n\nIf the view characteristics are generated asyncronously, then instead of providing the characteristics to cardstack's constructor, the extension may provide a `generateCharacteristics()` method ( [see here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/al-cardstack-view.ts#L350) for reference )\nthat generates the characteristics information dynamically.\n\n#### Ingredient #3b: Data Retrieval (required)\n\nEach cardstack implementation must implement a `fetchData()` method ( [see here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/al-cardstack-view.ts#L332) for reference ) that retrieves raw entity data\nfrom the view's datasource(s).  \n\nThis method must fulfill three obligations:\n\n1.  Asyncronously return an array of raw entity data\n2.  Update the view's pagination state to indicate if there are more results available, and if so how many\n3.  Apply any server-side filters, sort rules, grouping, or search implied by the view.  If the view characteristics indicate that a given property is handled client side, any applied remote filter rules will be provided to `fetchData` as a second parameter.\n\n#### Ingredient #3c: Property Extraction\n\nThe raw data provided by `fetchData()` will be ingested into the view automatically by the underlying `AlCardstackView` class, but a specific view implementation must also provide a way to convert raw entity data into the property DTO defined as Ingredient #1.\n\nTo perform this work, each cardstack implementation must provide a `deriveEntityProperties()` method ( [see here](https://github.com/alertlogic/nepal-core/blob/master/src/common/cardstack/al-cardstack-view.ts#L338) for reference ) that takes a raw entity as an input and returns a property DTO as a result.\n\n## Example Implementations\n\nThere are a few cardstack implementations that may be useful as examples.\n\n - [Example #1: Notifications List](https://algithub.pd.alertlogic.net/defender/nepal-ng-common-components/blob/master/projects/ng-notifications-components/src/lib/types/al-artifacts-cardstack.ts) is perhaps the most complex example we will ever have.  Its underlying data consists of synthetic entities combining subscriptions and other entities across the IWS service, virtually all of its optional methods are implemented, and it has almost two dozen properties in its display model.  If you want to be thoroughly confused, start here!\n - [Example #2: Usage Guide](https://algithub.pd.alertlogic.net/defender/nepal-ng-common-components/tree/master/examples/usage-guide/src/app/components/cardstack) is a better starting place.  It's a simple implementation that uses most optional functionality.\n\n",
    "readme/projects/ng-generic-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-generic-components --save\n\nIn your modules import in the library\n\n```\nimport { NgGenericComponentsModule } from '@al/ng-generic-components';\n```\nand finally in the html start using the components\n\n",
    "readme/directives/README": "# `@al/ng-generic-components` directives\n\n## `alExternalText`\n\nThis directive allows you to inject external text content into an element.  It accepts a single input (as a property value) that indicates which external resource to load and inject.  Please note that this resource *must* be a text/plain resource; other resource types will throw a content type mismatch error.\n\nExample usage:\n\n```\n<div class=\"my-content\" alExternalText=\"alid:scanning#schedulingFAQ\"></div>\n```\n\nExample usage, using variable resource:\n\n```\n<div [alExternalText]=\"external?'alid:details#externalDescription':'alid:details#internalDescription'></div>\n```\n\nPlease see the section on resource identifiers and bundled resources below.\n\n## `alExternalHtml`\n\nThis directive allows you to inject markup into an element's innerHTML.  It accepts a single input (as a property value) that indicates which external resource to load and insert. \n\nTwo important caveats about HTML injection:\n\n1.  The resource must be a text/html resource.  If it is not, a content type mismatch error will be thrown.\n2.  Links, styles, and images or other embedded resources in the HTML *must* be provided externally.\n\nExample usage:\n\n```\n<div class=\"something\" alExternalHtml=\"alid:help/aws-deployments.html\">\n```\n\nExample usage, using a component property named `topicResourceId`:\n\n```\n<div class=\"inline-help\" [alExternalHtml]=\"topicResourceId\"></div>\n```\n\n## Resource Identifiers and Bundled Resource Collections\n\nExternal resource retrieval is managed by a service named `AlExternalContentManagerService` (quite a mouthful), which uses a Gestalt endpoint to flatten the logical surface area of static content.\n\nIn general, external resources come in two flavors: raw, and bundled.  Raw sources are single entities stored by themselves; bundles are collections of small resources grouped together by category or topic for the sake of efficiency.  Both raw and bundled resources are referenced via a category and path; bundled resources include an additional item identifier.\n\nExample resource identifiers:\n\n  - `alid:context-help/exposures#completed` references the 'completed' item in the Alert Logic InfoDev (alid) 'context-help/exposures' bundle.\n  - `alid:tutorials/deployments/aws/getting-started.html` references the \"getting-started.html\" resource in the info dev 'tutorials/deployments/aws' topic.\n\n",
    "readme/al-suggestion-input/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-search-bar/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-content-toolbar/README": "# Al Content Toolbar\n\n## Summary\n\nThe content toolbar provide search, sort, select all and group by functinalities .\n\nAuthors:\n\n**Rakhi Mundhada** (rakhi.mundhada@alertlogic.com)\n\n## Example Usage\n\n### Interface\n\ninterface AlToolbarContentConfig {\n    showSelectAll?: boolean;\n    showSortBy?: boolean;\n    sort?: {\n        options?: SelectItem[];\n        order?: string;\n    };\n\n    showGroupBy?: boolean;\n    group?: {\n        options?: SelectItem[];\n    };\n\n    search?: {\n        maxSearchLength?: number;\n        textPlaceHolder?: string;\n    };\n}\n\n-TS\n\n### Inputs\n\nimport { AlToolbarContentConfig } from '../types/al-generic.types';\n\n\n config: AlToolbarContentConfig = {\n    showSelectAll: false,\n    showGroupBy: false,\n    showSortBy: true,\n    sort: {\n        order: 'asc',\n        options: [\n            {\n                label: 'option1',\n                value: 'option_1'\n            },\n            {\n                label: 'option2',\n                value: 'option_2'\n            }]\n    },\n    search: {\n        maxSearchLength: 20,\n        textPlaceHolder: \"search\"\n            },\n    group: {\n        options: [\n            {\n                label: 'group1',\n                value: 'group_1'\n            },\n            {\n                label: 'group2',\n                value: 'group_2'\n            }]\n    }\n};\n\n\n### Output\n    onOrderBy:  Event will trigger on click of asc/desc order icon and will emit the selected order.\n\n    onSearched: Event will trigger on search input\n    onSortSelection: Event will trigger whenever sorting dropdown value get change\n    onGroupSelection: Event will trigger whenever group by dropdown value get change\n    onSelectAll: Event will trigger when checkbox value get checked\n\n    Public sortByOrder(order:String){\n        console.log(order);\n    }\n\n    Public applyTextFilter(searchInput:String){\n        console.log(searchInput);\n    }\n\n    Public sortByChanged(selectedItem:String){\n        console.log(selectedItem);\n    }\n\n\n### HTML\nInclude an instance in your component's HTML providing an config input .\n#### simple usage\n\n```\n<al-content-toolbar [config]=\"config\"\n                (onSearched)=\"applyTextFilter($event)\" >\n</al-content-toolbar>\n\n```\n\n#### Full usage\n\n```\n<al-content-toolbar [config]=\"toolbarConfig\" (onOrderBy)=\"sortByOrder($event)\"\n                    (onSearched)=\"applyTextFilter($event)\" (onSortSelection)=\"sortByChanged($event)\"\n                    (onGroupSelection)=\"groupBy($event)\" (onSelectAll)=\"handleSelectAll($event)\">\n</al-content-toolbar>\n\n```\n",
    "readme/al-content-header/README": "# Al Content Header\n\n## Summary\n\nThe content header showing Title, header icon and calendar. Header icon and calendar is optional field.\n\n**Authors:**\nRakhi Mundhada (rakhi.mundhada@alertlogic.com)\n\n## Example Usage\n\nTS\n### Inputs\n\nheaderIcon:string ='fa fa-bug'\nheaderTitle : string = ' Testing App'\nshowCalendar : string = 'range'|'single' // Defines the quantity of the selection, valid values are \"single\" and \"range\".from to\ndefaultFixedRanges : default ranges to set the buttons in the al-date-range-selector\nreturnTimeFrame: boolean // set input in AlDateRangeSelector if you want to get a timeframe\nplaceholder: string // set a placeholder in the AlDateRangeSelector\n\n### Output\nonDateRangeSelected :Event will trigger when a date is selected and click on apply.\n\npublic applyDateChange(dateRange) {\n      console.log('date is ', dateRange);\n  }\n\nonDateRangeSelectedFromAlDateRangeSelector: Event will trigger when a date is selected and click on apply in the al-date-range-selector component.\n\nonClosedAlDateRangeSelector :Event will trigger when close the AlDateRangeSelector.\n\nonShowAlDateRangeSelector :Event will trigger when you open the AlDateRangeSelector.\n\nonSelectFixedRangeAlDateRangeSelector :Event will trigger when you select a fixed range in the AlDateRangeSelector.\n\n\n### HTML\n\n\nInclude an instance in your component's HTML providing an title is nessesary .Other inputs are optional\n\n#### Simple usage\n````\n<al-content-header [title]=\"headerTitle\"></al-content-header>\n\n````\n#### Full usage\n````\n<al-content-header\n    [icon]=\"headerIcon\" [title]=\"headerTitle\"\n    [showCalendar]=\"showCalendar\" (onDateRangeSelected)=\"applyDateChange($event)\">\n</al-content-header>\n\n````\n\n#### al-date-range-selector usage\n````\n<al-content-header\n    [icon]=\"headerIcon\" [title]=\"headerTitle\"\n    [showCalendar]=\"'al-date-range-selector'\" [defaultFixedRanges]=\"defaultFixedRanges\" [returnTimeFrame]=\"returnTimeFrame\"\n    (onDateRangeSelectedFromAlDateRangeSelector)=\"selectDateRangePicker($event)\"\n    (onClosedAlDateRangeSelector)=\"closedDateRangeSelector($event)\"\n    (onSelectFixedRangeAlDateRangeSelector)=\"fixedRangeDateRangeSelector($event)\"\n    (onShowAlDateRangeSelector)=\"showDateRangeSelector($event)\">\n</al-content-header>\n\n\n````",
    "readme/al-state-filter/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-notification-panel/README": "# AL Notification Panel\n\nA component used to show any kind of notification\n\n![screen shot 2018-05-09 at 14 59 02 am](https://algithub.pd.alertlogic.net/storage/user/66/files/af2a1414-592e-11e8-8384-e6c38d21fc71)\n\n## Usage\n\nImport the required types and classes\n\n```javascript\n\nimport { EventEmitter } from '@angular/core';\nimport { AlNotification } from '../types';\n\n```\nDefine the emitter attribute within the component that is going to use the notifications one\nand emit the event to trigger the notification itself with the details we required for it\n\n```javascript\n// Notifications Panel attributes\npublic notifications: EventEmitter<AlNotification> = new EventEmitter<AlNotification>();\npublic notification: AlNotification;\n@ViewChild(\"notificationPanel\") notificationPanel: AlNotificationPanelComponent;\n\n// The following methods are used one to trigger the notification and the other one\n// to receive the event emmit \ntriggerNotification() {\n    // Show notification panel\n    let contentText = \"2 Incidents Closed\";\n    this.notification = new AlNotification(contentText, AlNotificationType.Information, 0, true, null, \"UNDO\");\n    this.notifications.emit(this.notification);\n}\n\nnotificationButtonClick() {\n    this.notificationPanel.flush(this.notification);\n    console.log(\"The notification button was clicked and flushed!\");\n}\n\n```\nHtml\n\n``` html\n<al-notification-panel #notificationPanel \n                       [alertSource]=\"notifications\" \n                       (onButtonClicked)=\"notificationButtonClick()\">\n</al-notification-panel>\n```\n\n## Inputs\n\n### alertSource:EventEmitter<AlNotification>;\n\nThis is the notification definition\n\n## Callbacks\n\n### onButtonClicked;\n\nThe event receiver from the notification emmitter\n",
    "readme/al-table-caption/README": "# Al Table Caption\n\n## Summary\nYou will have the possibility to change the columns that you want to be displayed in your table, in addition to resetting the default columns and you can also use a search-bar, these elements are optional, if you don't want to use any you can specify it in the component inputs.\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Juan Galarza (juan.galarza@alertlogic.com)\n\n## Example Usage\n\n    // ts\n    public columns: Array<{}> = [];\n    public storageKey: string = \"\";\n    public showColumnsSelector: boolean = true;\n    public showSearch: boolean = true;\n    public showDownload: boolean = true;\n    public donwloadLabel: string = \"download label\";\n\n    constructor() {\n        this.columns = [\n            { \n                header: \"Name\",\n                field: \"name\", \n                sortableColumn: \"name\" \n            },\n            {\n                header: \"Country\",\n                field: \"country\",\n                sortableColumn: \"country.name\",\n            },\n            {\n                header: \"Representative\",\n                field: \"representative\",\n                sortableColumn: \"representative.name\",\n            },\n            { \n                header: \"Date\", \n                field: \"date\", \n                sortableColumn: \"date\" },\n            { \n                header: \"Status\", \n                field: \"status\", \n                sortableColumn: \"status\" },\n            {\n                header: \"Activity\",\n                field: \"activity\",\n                sortableColumn: \"activity\",\n            },\n        ];\n        this.storageKey = \"my-table\"\n        this.showColumnsSelector = true;\n        this.showSearch = true;\n    }\n\n\tsearchTable() {\n        console.log(\"Hanlde the search\")\n    }\n\n    changeColumns(event:{columns:[]}) {\n        console.log(event.columns)\n    }\n    \n    // HTML\n\t<al-table-caption \n\t\t[cols]=\"columns\"\n\t\t[defaultColumns]=\"columns\"\n\t\t[storageKey]=\"storageKey\"\n\t\t[showColumnsSelector]=\"showColumnsSelector\"\n\t\t[showSearch]=\"showSearch\"\n\t\t(onSearched)=\"searchTable($event)\"\n\t\t(onChangeColumns)=\"changeColumns($event)\"\n\t\t>\n\t</al-table-caption>\n\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| cols     |Array     |        []         |List with all the columns in the table.|\n| defaultColumns     |Array     |        []         |List of default columns in the table.|\n| storageKey     |String     |\"dynamic-table-default\"         |The key where you want to save the state in the localStorage.|\n| showColumnsSelector     |boolean     |        true         |Allows define if you want to use the column selector.|\n| showSearch     |boolean     |        true         |Allows define if you want to use the search input.|\n| showDownload     |boolean     |        false         |Allows define if you want to use the download button.|\n| downloadLabel     |string     |        \"Download All\"         |Allows define the label that you want to use in the download button.|\n| useLocalStorage     |boolean     |        true         |Allows define if you want to use the local storage to save your data configuration.|\n\n## Outputs\n \n| Name  | Description |\n|-------|-------------|\n| onSearched     |Emit an event when user type in the search bar.|\n| onChangeColumns     |Emit an event with the selected columns when the user change the multi selector.|\n| onDownload     |Emit an event when user click the download button.|\n",
    "readme/new-components/al-select/README": "# al-select\n\n## Basic Usage\n```typescript\nimport { AlOptionItem } from '@al/ng-generic-components';\n\n// Setup an array of AlOptionItem objects\npublic options: AlOptionItem[] = [\n        { label: 'Option One', value: 'one' },\n        { label: 'Option Two', value: 'two' },\n        { label: 'Option Three', value: 'three' },\n        { label: 'Option Four is disabled', value: 'four', disabled: true },\n        { label: 'Option Five', value: 'five' }\n    ];\n```\n\n```html\n<al2-select label=\"Select Field\" [options]=\"options\"><al2-select>\n```\n\n## With Hint Text\n```html\n<al2-select\n    label=\"Description\"\n    [options]=\"radioOptions\"\n    hint=\"Give extra information here\">\n</al2-select>\n```\n\n## With Tooltip\n```html\n<al2-select\n    label=\"Select Option\"\n    [options]=\"radioOptions\"\n    hint=\"Give extra information here\"\n    tip=\"Extra help can go here\">\n</al2-select>\n```\n\n## Marking Required Fields\n\n```html\n<al2-select\n    label=\"Select Option\"\n    [options]=\"radioOptions\"\n    required=\"true\">\n</al2-select>\n```\n\n## Disabled Fields\n\n```html\n<al2-select\n    label=\"Select Option\"\n    [options]=\"radioOptions\"\n    disabled=\"true\">\n</al2-select>\n```\n",
    "readme/new-components/al-fieldset/README": "# al-fieldset \n\n## Basic Usage\n```html\n<al2-fieldset legend=\"Address\">\n    <al2-input type=\"text\" label=\"Address Line 1\"></al2-input>\n    <al2-input type=\"text\" label=\"Address Line 2\"></al2-input>\n</al2-fieldset>\n```\n\n## Basic Usage - with large legend text\n```html\n<al2-fieldset legend=\"Address (Large legend heading)\" [legendLarge]=\"true\">\n    <al2-input type=\"text\" label=\"Address Line 1\"></al2-input>\n    <al2-input type=\"text\" label=\"Address Line 2\"></al2-input>\n</al2-fieldset>\n```\n\n## Basic Usage - with large legend text\n```html\n<al2-fieldset legend=\"Address (with hint and tooltip)\" [legendLarge]=\"true\" hint=\"I am a hint\" tip=\"I am a tooltip\">\n    <al2-input type=\"text\" label=\"Address Line 1\"></al2-input>\n    <al2-input type=\"text\" label=\"Address Line 2\"></al2-input>\n</al2-fieldset>\n```\n",
    "readme/new-components/al-textarea/README": "# al-textarea \n\n## Basic Usage\n```html\n<al2-textarea\n    label=\"Description\"\n    rows=\"5\">\n</al2-textarea>\n```\n\n## With Hint Text\n```html\n<al2-textarea\n    label=\"Description\"\n    rows=\"5\"\n    hint=\"Give extra information here\">\n</al2-textarea>\n```\n\n## With Tooltip\n```html\n<al2-textarea\n    label=\"Description\"\n    rows=\"5\"\n    hint=\"Give extra information here\"\n    tip=\"Extra help can go here\">\n</al2-textarea>\n```\n\n## Marking Required Fields\n\n```html\n<al2-textarea\n    label=\"Description\"\n    rows=\"5\"\n    required=\"true\">\n</al2-textarea>\n```\n\n## Disabled Fields\n\n```html\n<al2-textarea\n    label=\"Description\"\n    rows=\"5\"\n    disabled=\"true\">\n</al2-textarea>\n```\n",
    "readme/new-components/README": "# AL Form Input Components (NEW)\n\nA suite of form input components implementing the latest UX\\UI Design specifications from `@al/ui-css-kit`\n\nCurrently supported input types:\n\n- Text\n- Number\n- Search\n- Checkbox\n- Radio\n- TextArea\n- Select\n- MultiSelect (still under development)\n\nFull Angular Forms support via `formControl` and `formControlName` directive attributes, see examples below including validation.\n",
    "readme/new-components/al-checkbox/README": "# al2-checkbox \n\n## Basic Usage\n```html\n<al2-checkbox label=\"Is Friendly\"></al2-checkbox>\n```\n\n## Checkbox Group\n```typescript\nimport { AlOptionItem } from '@al/ng-generic-components';\n\n// Setup an array of AlOptionItem objects\npublic checkboxGroup: AlOptionItem[] = [\n        { label: 'Option One', value: 'one' },\n        { label: 'Option Two', value: 'two', selected: true },\n        { label: 'Option Three', value: 'three' },\n        { label: 'Option Four', value: 'four' },\n        { label: 'Option Five', value: 'five' }\n    ];\n```\n\n```html\n<al2-checkbox-group\n    label=\"Select Option\"\n    [options]=\"checkboxGroup\"\n    (onChange)=\"checkboxGroupChange($event)\">\n</al2-checkbox-group>\n```\n",
    "readme/new-components/al-input/README": "# al-input \n\n## Simple Text Input\n```html\n<al2-input\n    type=\"text\"\n    label=\"Text Input\">\n</al2-input>\n```\n\n## With Hint Text\n```html\n<al2-input\n    type=\"text\"\n    label=\"Text Input\"\n    hint=\"Give extra information here\">\n</al2-input>\n```\n\n## With Tooltip\n```html\n<al2-input\n    type=\"text\"\n    label=\"Text Input\"\n    tip=\"Give extra information here\">\n</al2-input>\n```\n\n## Marking Required Fields\n\n```html\n<al2-input\n    type=\"text\"\n    label=\"Text Input\"\n    required=\"true\">\n</al2-input>\n```\n\n## Disabled Fields\n\n```html\n<al2-input\n    type=\"text\"\n    label=\"Text Input\"\n    disabled=\"true\">\n</al2-input>\n```\n",
    "readme/new-components/al-radio/README": "# al2-radio\n\n## Basic Usage\n\n```typescript\nimport { AlOptionItem } from '@al/ng-generic-components';\n\n// Setup an array of AlOptionItem objects\npublic radioOptions: AlOptionItem[] = [\n        { label: 'Option One', value: 'one' },\n        { label: 'Option Two', value: 'two' },\n        { label: 'Option Three', value: 'three' },\n        { label: 'Option Four is disabled', value: 'four', disabled: true },\n        { label: 'Option Five', value: 'five' }\n    ];\n```\n\n```html\n<al2-radio *ngFor=\"let item of radioOptions\"\n    name=\"radioOptions\"\n    [value]=\"item.value\"\n    [label]=\"item.label\"\n    [disabled]=\"item.disabled\">\n</al2-radio>\n```\n",
    "readme/al-dropdown-list/README": "# Al Dropdown With List\n\nThis is an enhanced version of the original dropdown from primeng. Includes details for the options and list with actions.\n\n![al-dropdown-list](https://algithub.pd.alertlogic.net/storage/user/735/files/05cebd00-6469-11ea-9f0c-cae03c823bc6)\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Andres David Echeverri Jimenez (andres.echeverri@alertlogic.com)\n\n## Requires\n\nRequires **AlSelectItem** interface:\n\n```typescript\nimport { AlSelectItem } from '@al/ng-generic-components';\n```\n\n## Usage\n\nFull mode:\n\n```html\n<al-dropdown-list placeholder=\"Select\"\n                  [(ngModel)]=\"value\"\n                  [options]=\"options\"\n                  (ngModelChange)=\"selectOption($event)\">\n</al-dropdown-list>\n```\n\nSimplest mode:\n\n```html\n<al-dropdown-list [options]=\"yourOptions\"></al-dropdown-list>\n```\n\n## Displaying Details\n\nDropdown with list uses the **AlSelectItem** interface, if you want to specify icon and category just add a \"subtitle\" and \"icon\" field to the value object:\n\nSpecify \"details\":\n\n```typescript\n    {\n        title: \"High\",\n        subtitle: \"Threat Level\"\n        icon: \"al-risk-high\"\n        value: { // The value object that could contain anything.\n            anyValue: \"1\",\n            anyOtherValue: \"Any value!\"\n        }\n    }\n```",
    "readme/al-feedback/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-action-snackbar/README": "# Al Action Snackbar\n\n## Summary\nThe action snackbar appear on the bottom of the page (fixed) and it will provide actions available that can be taken. The actions are dinamycs and can be passed through an ```@Input```\n\n<img src=\"https://algithub.pd.alertlogic.net/storage/user/735/files/6bb8a980-48eb-11ea-96da-ff2546d02f29\"/>\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Andres David Echeverri Jimenez (andres.echeverri@alertlogic.com)\n\n## Example Usage\n\n    // ts\n\tpublic actionSnackbarButtons: AlActionSnackbarElement[] = [\n\t\t{\n            event: \"keep\",\n            icon: \"check_circle\",\n            text: \"KEEP\",\n            visible: true,\n            type: 'button'\n        },\n        {\n            event: \"clear\",\n            icon: \"cancel\",\n            text: \"CLEAR ALL\",\n            visible: false,\n            type: 'button'\n        }\n    ];\n    public actionSnackbarVisible: boolean = false;\n    public actionSnackbarText: string = 'Hello Word!';\n    public actionSnackbarSelectedOption: AlActionSnackbarEvent = '';\n\n    public actionSnackbarEvent(event: AlActionSnackbarEvent) {\n        this.actionSnackbarSelectedOption = event;\n    }\n    \n    // HTML\n\t<button (click)=\"actionSnackbarVisible = !actionSnackbarVisible\" pButton label=\"Toggle\"></button>\n\t<al-action-snackbar [text]=\"actionSnackbarText\"\n\t\t\t\t\t\t[visible]=\"actionSnackbarVisible\"\n\t\t\t\t\t\t[elements]=\"actionSnackbarButtons\"\n\t\t\t\t\t\t(onElementPressed)=\"actionSnackbarEvent($event)\">\n\t</al-action-snackbar>\n\t<p>Event: {{actionSnackbarSelectedOption}}</p>\n\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| text |string     |```''```         |Allows define the text.             |\n|visible       |boolean      |```false```         |Allows to define whether al-action-snackbar is visible or not.             |\n|elements       |AlActionSnackbarElement[]      |```undefined```        |Defined the list of elements to displayed.             |\n\n## Outputs\n\n  \n| Name | Parameters | Description |\n|--|--|--|\n| onElementPressed | AlActionSnackbarEvent | Emit an event when user clicks on some element from the list. |\n\n## Interface and types\n\n    export type AlActionSnackbarEvent = string;\n\texport interface AlActionSnackbarElement {\n\t\tevent: AlActionSnackbarEvent;\n\t\ticon?: string;\n\t\tvisible: boolean;\n\t\ttext: string;\n        type: 'button' | 'input_switch';\n\t};\n",
    "readme/al-help-sidebar/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-collapsible-layout/README": "# Al Collapsible Layout\n\n## Summary\nYou will have the possibility to distribute the content of your page using two side panels, one on the left and one on the right. These panels are optional and have the ability to collapse to make more space for central content. If you don't want to use any panel, you can specify it in the component inputs.\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Juan Galarza (juan.galarza@alertlogic.com)\n\n## Example Usage\n\n    // ts\n    public rightTooltipLabel:string = \"\";\n\tpublic leftTooltipLabel:string = \"\";\n\tpublic leftPanel:boolean = true;\n\tpublic rightPanel:boolean = true;\n\n\tconstructor() {\n\t\tthis.rightTooltipLabel = \"Right panel\";\n\t\tthis.leftTooltipLabel = \"Left panel\";\n\t}\n    \n    // HTML\n\t<al-collapsible-layout\n\t\t[rightTooltipLabel]=\"rightTooltipLabel\"\n\t\t[leftTooltipLabel]=\"leftTooltipLabel\"\n\t\t[leftPanel]=\"leftPanel\"\n\t\t[rightPanel]=\"rightPanel\">\n\t\t<div left>\n\t\t\t<p>Left Panel</p>\n\t\t</div>\n\t\t<div center>\n\t\t\t<p>Center Panel</p>\n\t\t</div>\n\t\t<div right>\n\t\t\t<p>Right Panel</p>\n\t\t</div>\n\t</al-collapsible-layout>\n\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| rightTooltipLabel     |string     |''         |Allows define the tooltip label for the right panel button.|\n| leftTooltipLabel     |string     |''         |Allows define the tooltip label for the left panel button.|\n| leftPanel     |boolean     |true         |Allows define if you want to use the left panel.|\n| rightPanel     |boolean     |true         |Allows define if you want to use the right panel.|\n\n",
    "readme/al-context-classifier/README": "# al-context-classifier\n\nThis component abstracts the programmatic addition/subtraction of CSS classes to elements outside of the \ncurrent component.\n\n## Usage\n\n```\n<al-context-classifier\n    selector=\"body div.accordion > span.title\"\n    class=\"special-titles\"\n    [all]=\"true\"></al-context-classifier>\n```\n\nThe component accepts three inputs.\n\n`selector` - This should be a valid CSS selector.  It will be passed to `document.querySelector()` (or `document.querySelectorAll()`)\nto retrieve the elements the CSS class should be applied to.\n\n`class` - This is the CSS class that should be appended to the matching element(s).\n\n`all` - This is a boolean value (default false) that indicates whether all matching elements should be modified,\n            or only the first.\n\nIn general, `all` should only be set to true in special cases.\n\n## Special Note\n\nOverreliance on this component will have a negative effect on our ecosystem's stylistic integrity.  It should\nonly be used in rare cases where a global effect can only be triggered from a child element.\n",
    "readme/al-toast/README": "# @al/ng-generic-components/al-toast\n\n## Toast Component for Alert Logic Angular Applications\n\nA ready made toast component for usage with powered Alert Logic Angular applications\n\n## Usage\n\nInclude an instance in your component's HTML providing an unique key string\n\n````\n<al-toast key=\"myToastId\"></al-toast>\n````\n\nInject `AlToastService` in your component\n````\nimport { AlToastService } from '@al/ng-generic-components/al-toast';\n\nconstructor(private alToastService: AlToastService) {\n    // Following subscription is only necessary if your toast messages have buttons that you want to listen for click events\n    this.alToastService.getButtonEmitter('myToastId').subscribe(\n      (button) => {\n        // Do something after button is clicked\n      }\n    );\n}\n````\n\nSend a message using our predefined `AlToastMessage` interface\n````\nconst alToastMessage: AlToastMessage = {\n    sticky: false,\n    closable: true,\n    data: {\n        title: 'This is the title',\n        message: 'This is a test message, here you can put whatever you want, choose wisely your words',\n        iconClass: 'pi-exclamation-triangle',\n        buttons: [\n            {\n                key: 'cancel',\n                label: 'Cancel',\n                class: 'p-col-fixed',\n                textAlign: 'right'\n            },\n            {\n                key: 'save',\n                label: 'Save',\n                class: 'p-col-fixed',\n                textAlign: 'right'\n            }\n        ]\n    }\n};\nthis.alToastService.showMessage('myToastId', alToastMessage);\n````\n\n",
    "readme/al-icon-block/README": "# AL Icon Block\n\nA component for displaying icon sections in Alert Logic.\n\n--usage\n\n``` html\n-- With material Icon\n    <al-icon-block [matIcon]=\"'add'\" [label]=\"sample\"></al-icon-block>\n\n-- Icon using FontAwesome classes\n\n    <al-icon-block [iconClass]=\"'fa fa-bug'\" [label]=\"sample\"></al-icon-block>\n\n--If you have to disable icon-block add property [disabled] =\"true\"\n\n    <al-icon-block [iconClass]=\"'fa fa-bug'\" [label]=\"sample\" [disabled]=\"true\"></al-icon-block>\n\n```\n\n## Inputs\n\n### icon:string;\n\nThe icon name input for icon sets that use ligatures (i.e. Material Icons)\n\n### iconClass:string;\n\nThe icon name input for icon sets that use classes (i.e. FontAwesome)\n\n### label:string;\n\ntext for the small label under the icon.\n\n## Notes\nonly use one of these at a time. These input exist in parallel to accomodate FontAwesome icons and Material Icons.",
    "readme/al-dropdown-filter/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-bottom-sheet/README": "# Al Bottom Sheet\n\n## Summary\nThe bottom sheet are panels that contain supplementary content that are anchored to the bottom of the screen. This version is coming with a default header template that can be disabled.\n\n<img src=\"https://algithub.pd.alertlogic.net/storage/user/735/files/43aa9880-40ea-11ea-9c77-900181bf07a0\"/>\n\nAuthors:\n- Andres David Echeverri Jimenez (andres.echeverri@alertlogic.com)\n\n## Example Usage\n\n    // ts\n    headerOptions: AlBottomSheetHeaderOptions  = {\n\t    icon:  'call_merge',\n\t    title:  'Create Correlation Rule',\n\t\tcollapsibleFromTitle: true,\n\t    primaryAction: {\n\t\t    text: 'My Title',\n\t\t    disabled:  true,\n\t    },\n\t    secondaryAction:{\n\t\t    text:  'Cancel',\n\t\t    disabled:  false\n\t    }\n    };\n\n\t@ViewChild(AlBottomSheetComponent) alBottomSheet: AlBottomSheetComponent;\n   \n   \tpublic save(){\n   \t\tconsole.log('onPrimary');\n   \t}\n   \n    public cancel() {\n    \tconsole.log('onSecondary');\n    \tthis.alBottomSheet.hide();\n    }\n\n\tpublic open() {\n\t\tconsole.log('onTertiary');\n\t\tthis.alBottomSheet.open();\n\t}\n    \n\tpublic toggle() {\n\t\tthis.alBottomSheet.toggle();\n\t}\n    \n    // HTML\n\t<button (click)=\"toggle()\" pButton label=\"Open\"></button>\n\t<al-bottom-sheet\n\t\t[headerOptions]=\"headerOptions\"\n\t\t(onPrimaryAction)=\"save()\"\n\t\t(onSecondaryAction)=\"cancel()\"\n\t\t(onTertiaryAction)=\"toggle()\">\n\t\t<!-- Content Projection -->\n\t\t<h1>Hello Word!</h1>\n\t</al-bottom-sheet>\n\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| width |string     |'95%'         |Allows define the width of the al-bottom-sheet.<br> The values can be in px, %, vh, rem etc...             |\n|heightActive       |string      |'67px'         |Allows to set the heigth of the sidebar when the sidebar is collapse. <br>The values can be in px, %, vh, rem etc…             |\n|heightFullScreen       |string      |'95vh'         |Allows to set the heigth of the sidebar when the sidebar is open.<br>The values can be in px, %, vh, rem etc...              |\n|headerOptions       |AlBottomSheetHeaderOptions      |undefined         |Allows establish options for header (default template).<br>If is null or undefined the header will not be displayed              |\n## Outputs\n\n  \n| Name | Parameters | Description |\n|--|--|--|\n| onPrimaryAction | null | Emit an event when user clicks on Primary buttom of header. |\n| onSecondaryAction | null | Emit an event when user clicks on Secondary buttom of header. |\n| onTertiaryAction | null | Emit an event when user clicks on Tertiary buttom of header. |\n\n## Interface\n\n    export  interface  AlBottomSheetHeaderOptions {\n\t    icon?:  string; // for Material Icons\n\t\tclassIcon?:string; // for Class Icons i.e. al al-assets, al-applications etc.\n\t    iconStyle?: {[key:  string]:  string};\n\t    title?:  string;\n\t    titleStyle?: {[key:  string]:  string};\n\t\tcollapsibleFromTitle?: boolean // allow collapse the bottom sheet from title\n\t    primaryAction?: { // primary buttom\n\t\t    text?:  string,\n\t\t    disabled:  boolean\n\t    },\n\t    secondaryAction?: { // secondary buttom\n\t\t    text:  string,\n\t\t    disabled:  boolean,\n\t    },\n\t    tertiaryAction?: { // tertiary buttom\n\t\t    text:  string\n\t\t    disabled:  boolean,\n\t    }\n    }\n\n## Notes\nFor the primary, secondary or tertiary buttons to appear, you must initialize the primaryAction, secondaryAction or tertiaryAction properties of the AlBottomSheetHeaderOptions interface.\n\n",
    "readme/al-score-count/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-identity-icon/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-selectable-list/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-view-helper/README": "# AlViewHelperComponent Usage\n\n## Summary\n\nThe AlViewHelperComponent rolls common top-level view functionality (zero state, loading indicator, error notifications) into a\nsingle utility component with a public API.\n\n## Basic Usage\n\nEmbed the component into your view template using the usual notation:\n\n```\n<al-view-helper [loading]=\"expression indicating whether loading is active\"\n                [empty]=\"expression indicating whether the view is empty and the zero state should be shown\"\n                [notifyPanel]=\"expression indicating whether the notification panel should be enabled\">\n    <span zero-state-title>Top level text for a zero state condition goes here.</span>\n    <span zero-state-description>Secondary text for a zero-state condition goes here.</span>\n    <i zero-state-icon class=\"material-icons\">info</i>\n</al-view-helper>\n```\n\nNote that the elements with attrs `zero-state-title`, `zero-state-description`, and `zero-state-icon` will be content projected\ninto the relevant portions of the zero state display; typically, the element denoted as the `zero-state-icon` should be a material design\nicon of the appropriate type for the view, or a generic info icon.\n\nThe component may also be interacted with programmatically in your controller.\n\nIn your header:\n```\nimport { AlViewHelperComponent } from '@al/ng-generic-components';\n```\n\nIn your component class:\n```\n@ViewChild(AlViewHelperComponent) viewHelper:AlViewHelperComponent;\n```\n\n## Load Indicator\n\nThe load indicator can be controlled by binding `[loading]` to an expression, OR by calling the `startLoading()` and `stopLoading()` mechanisms on the component instance.\n\n## Zero State\n\nThe zero state can be enabled by binding `[empty]` to an expression that evaluates to true, OR by calling `enableZeroState()` on the component instance.\n\nWhen enabled, the zero state will be constructed using content projection -- the spans with `zero-state-title` and `zero-state-description` attributes will be used for the text.\n\n## Error State\n\nThe error state can be triggered by binding `[error]` to a description of the error that occurred -- any truthy value will work, although there is special logic\nfor handling `Error` and API Response objects (`AxiosResponse`, generally anything generated by a nepal client or AlDefaultClient) that make it desirable to use those when they are\navailable.\n\nThe user can also bind a callable/`Function` to the view helper's `[retryHandler]` @Input() -- if available, the error state will display a \"Retry\" button\nas its primary action.  Clicking the retry button will clear the error state and call that function (which would typically, one presumes, use a loading indicator\nto tell the user it is \"trying again\").\n\n## Notifications\n\nNotifications can be used by binding `[notifyPanel]` to an expression that evaluates to true and then using the notification-related methods on the component instance.\n\nTo emit an info notification that autodismisses in 10 seconds:\n\n```\nviewHelper.notifyInfo( \"We are feeling quite groovy today.\", 10000 );\n```\n\nTo emit a warning notification that does not autodismiss:\n\n```\nviewHelper.notifyWarning( \"I'm a little worried about that growth in your left buttock, Jim...  do me a favor and get down to the medical bay.\" );\n```\n\nAnd to emit an error notification:\n\n```\nviewHelper.notifyError(\"EPIC FAIL FULL STOP\", 6000 );\n```\n",
    "readme/al-initials/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-multiselect-list/README": "# Al Multi Select With List\n\nThis is an enhanced version of the original multiselect from primeng. Includes details for the options\nand list with actions.\n\n**Note:** This component is like a input, that means it can meke use of the directives ```ngModel``` and ```formControlName```\n\n![multiselect-list](https://algithub.pd.alertlogic.net/storage/user/735/files/85ee1d00-6e82-11ea-8200-a15e6af57a79)\n\n## Requires\n\nRequires either the **AlSelectItem** or **AlChipItem** interface from multi-select component:\n\n```typescript\nimport { AlSelectItem } from '@al/ng-generic-components';\n// or\nimport { AlChipItem } from '@al/ng-generic-components';\n```\n\n## Usage\n\n\n\nFull mode:\n\n```html\n<al-multiselect-list placeholder=\"Change the label here\" [options]=\"yourOptions\" (onSelectedOption)=\"selectOption($event)\"></al-multiselect-list>\n```\n\nBy default the selected options will be render as vertically oriented list of items. You can change that to display the items as a set of chips separated by ORs and ANDs\nby using the selectableListMode input set to `chips` (by default it uses `list`)\n\n```html\n<al-multiselect-list placeholder=\"Change the label here\" [options]=\"yourOptions\" selectableListMode=\"chips\"  (onSelectedOption)=\"selectOption($event)\"></al-multiselect-list>\n```\n\nSimplest mode:\n\n```html\n<al-multiselect-list [options]=\"yourOptions\"></al-multiselect-list>\n```\n\n## Displaying Details\n\nWhen Multiselect uses the **AlSelectItem** interface from **multi-select component** if you want to specify details just\nadd a \"details\" field to the value object:\n\nSpecify \"details\":\n\n```typescript\n    {\n        title: \"John Wick\",\n        subtitle: \"jshonwick@mydetails.com\" // Details that will be displayed at bottom.\n        value: { // The value object that could contain anything.\n            anyValue: \"1\",\n            anyOtherValue: \"Any value!\"\n        }\n    }\n```\n\nWhen Multiselect uses the **AlChipItem** interface you also need to pass the separator that each chip will use (permited values are `AND`, `and`, `OR` and `or`)\n\n```typescript\n    {\n        title: \"John Whick\",\n        separator: 'AND'\n        subtitle: \"jshonwhick@mydetails.com\" // Details that will be displayed at bottom.\n        value: { // The value object that could contain anything.\n            anyValue: \"1\",\n            anyOtherValue: \"Any value!\"\n        }\n    }\n```\n\n## Selected Options\n\nTo grab the selected options you can bind a listener to the \"onSelectedOption\" every time the user select or delete a item from the list:\n\n```html\n    <al-multiselect-list [options]=\"multiSelectWithListItems\" (onSelectedOption)=\"selectOption($event)\"></al-multiselect-list>\n```\n",
    "readme/al-table-caption-v2/README": "# Al Table Caption V2\n\n## Summary\nThis is a new version of al-table-caption component which resolves many issues when we are integrating inside primeng tables.\nIt is not a replacement because the old component is still heavily used and this one contains breaking changes.\nWe encourage engineers to start using this component in favor of the old version for new developments.\nYou will have the possibility to change the columns that you want to be displayed in your table, in addition to resetting the default columns and you can also use a search-bar, these elements are optional, if you don't want to use any you can specify it in the component inputs.\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Juan Galarza (juan.galarza@alertlogic.com)\n- Darwin Garcia (dgarcia@alertlogic.com)\n\n## Example Usage\n\n    // ts\n    public columns: Array<{}> = [];\n    public storageKey: string = \"\";\n    public showColumnsSelector: boolean = true;\n    public showSearch: boolean = true;\n    public showDownload: boolean = true;\n    public donwloadLabel: string = \"download label\";\n\n    constructor() {\n        this.columns = [\n            { \n                header: \"Name\",\n                field: \"name\", \n                sortableColumn: \"name\" \n            },\n            {\n                header: \"Country\",\n                field: \"country\",\n                sortableColumn: \"country.name\",\n            },\n            {\n                header: \"Representative\",\n                field: \"representative\",\n                sortableColumn: \"representative.name\",\n            },\n            { \n                header: \"Date\", \n                field: \"date\", \n                sortableColumn: \"date\" },\n            { \n                header: \"Status\", \n                field: \"status\", \n                sortableColumn: \"status\" },\n            {\n                header: \"Activity\",\n                field: \"activity\",\n                sortableColumn: \"activity\",\n            },\n        ];\n        this.storageKey = \"my-table\"\n        this.showColumnsSelector = true;\n        this.showSearch = true;\n    }\n\n\tsearchTable() {\n        console.log(\"Handle the search\")\n    }\n\n    changeColumns(event:{columns:[]}) {\n        console.log(event.columns)\n    }\n    \n    // HTML\n\t<al-table-caption-v2 \n\t\t[cols]=\"columns\"\n\t\t[defaultColumns]=\"columns\"\n\t\t[storageKey]=\"storageKey\"\n\t\t[showColumnsSelector]=\"showColumnsSelector\"\n\t\t[showSearch]=\"showSearch\"\n\t\t(onSearched)=\"searchTable($event)\"\n\t\t(onChangeColumns)=\"changeColumns($event)\"\n\t\t>\n\t</al-table-caption-v2>\n\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| cols     |Array     |        []         |List with all the columns in the table.|\n| defaultColumns     |Array     |        []         |List of default columns in the table.|\n| storageKey     |String     |\"dynamic-table-default\"         |The key where you want to save the state in the localStorage.|\n| showColumnsSelector     |boolean     |        true         |Allows define if you want to use the column selector.|\n| showSearch     |boolean     |        true         |Allows define if you want to use the search input.|\n| showDownload     |boolean     |        false         |Allows define if you want to use the download button.|\n| downloadLabel     |string     |        \"Download All\"         |Allows define the label that you want to use in the download button.|\n| useLocalStorage     |boolean     |        true         |Allows define if you want to use the local storage to save your data configuration.|\n\n## Outputs\n \n| Name  | Description |\n|-------|-------------|\n| onSearched     |Emit an event when user type in the search bar.|\n| onChangeColumns     |Emit an event with the selected columns when the user change the multi selector.|\n| onDownload     |Emit an event when user click the download button.|\n",
    "readme/al-selector/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-menu-list/README": "# al-componentNameGoesHere\n\n## Summary\nWhy am I empty?\n\n## Basic Usage\nI'm hungry.",
    "readme/al-preview/README": "# Al preview\n\nA simple component for displaying a list of fields using label\\value pairs.\n\n## Summary\nYou will have the possibility to display a list of properties that follow the next structure:\n\n\tAlPreviewData {\n\t\ttitle:string = \"\";\n\t\tsubtitle:string = \"\";\n\t\tproperties:Array<{key:string; value:string|AlPreviewDataValueDefinition[]|TemplateRef<any>; icon?:string; isTemplate?:boolean, templateData?:any}> = [];\n\t}\n\nYou can pass a template ref as value of property using templateData key, additionally you can pass the data to render properly the template. If you want to use it, you should indicate it setting isTemplate as True.\n\nAuthors:\n- Fabio Miranda (fmiranda@alertlogic.com)\n- Juan Galarza (juan.galarza@alertlogic.com)\n\n## Example Usage\n\nSimple example using single values for each property:\n\n    // ts\n    title: string = \"\";\n    subtitle: string = \"\";\n    properties: Array<{ key: string; value: string; icon?: string }> = [];\n\n    public data: AlPreviewData = new AlPreviewData();\n\n    constructor() {\n        this.data.title = \"Preview Data Title\";\n        this.data.subtitle = \"Preview Data Subtitle\";\n        this.data.properties = [\n            { key: \"Assets\", value: \"20\", icon: \"al al-asset\" },\n            { key: \"Datacenters\", value: \"5\", icon: \"al al-datacenter\" },\n            { key: \"Hosts\", value: \"100\", icon: \"al al-host\" },\n        ];\n    }\n\nA more advanced example using mutliple values for each property, with each value having its own display icon (optional):\n\n    // ts\n    title: string = \"\";\n    subtitle: string = \"\";\n    properties: Array<{ key: string; value: string; icon?: string }> = [];\n\n    public data: AlPreviewData = new AlPreviewData();\n\n    constructor() {\n        this.data.title = \"Preview Data Title\";\n        this.data.subtitle = \"Preview Data Subtitle\";\n        this.data.properties = [{ \n            key: \"Threat Levels\", \n            value: [\n                { label: \"Critical\", icon: \"fa fa-circle risk-critical\" },\n                { label: \"Medium\", icon: \"fa fa-circle risk-medium\" },\n                { label: \"Low\", icon: \"fa fa-circle risk-low\" }\n            ]\n        }];\n    }\n\n    // HTML\n\t<al-preview [data]=\"data\"></al-preview>\n\n## Value Actions\nIt is also possible to assign a callback function to be invoked when clicking on values in the preview panel\n\n    //ts\n    this.data.properties = [{ \n        key: \"Interesting Things\", \n        value: [\n            { label: \"Some value\", action: () => {this.doSomething();} },\n            { label: \"Some other value\", action: () => {this.doSomethingElse();} }\n        ]\n    }];\n\n\n## Inputs\n \n| Name  | Type | Default | Description |\n|-------|------|---------|-------------|\n| data     |AlPreviewData     |         |Allows define the data with te props to be displayed|\n\n",
    "readme/projects/ng-asset-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications. Only asset related components here.\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-asset-components --save\n\nIn your modules import in the library\n\n```\nimport { NgAssetModule } from '@al/ng-asset-components';\n```\nand finally in the html start using the module\n\n",
    "readme/al-evidence-detail-card/README": "# Al Evidence Detail Card\n\n## Summary\nThis card displays the evidence related information of an exposure or remediation.\n\n# Examples of use\n\n## Basic use\n\nThe type Evidence is required:\n\n```ts\npublic myEvidence: Evidence;\n```\n\nPass the object as the asset propertie:\n\n```html\n<al-evidence-detail-card [asset]=\"myEvidence\"></al-evidence-detail-card>\n```\n",
    "readme/al-asset-card/README": "# Al Asset Card\n\n## Summary\nThe asset card displays information related to an assets in the exposures or remediations details view, this component indentifies all properties of the asset and draws the corresponding icon for each one.\n\n# Examples of use\n\n## Basic use\n\nThe type AssetDetail is required:\n\n```ts\npublic myAsset: AssetDetail;\n```\n\nPass the object as the asset propertie:\n\n```html\n<al-asset-card [asset]=\"myAsset\"></al-asset-card>\n```\n",
    "readme/al-vulnerability-detail-card/README": "# Al Vulnerability Detail Card\n\n## Summary\nThis card shows the resolution information of a remediations explaining how to resolve a vulnerability, the content is htmlized.\n\n# Examples of use\n\n## Basic use\n\nThe type Exposure is required:\n\n```ts\npublic myExposure: Exposure;\n```\n\nPass the object as the exposure property:\n\n```html\n        <al-vulnerability-detail-card [exposure]=\"myExposure\"></al-vulnerability-detail-card>\n\n```\n",
    "readme/projects/ng-notifications-components/README": "### Component Library for Alert Logic Angular Applications\n\nA ready made suite of Angular UI components for usage powered Alert Logic Angular applications\n\nBuilt using [PrimeNG](https://www.primefaces.org/primeng)\n\n## How to use this library\nin your project install\nnpm install @al/ng-notifications-components --save\n\nIn your modules import in the library\n\n```\nimport { NgNotificationsModule } from '@al/ng-notifications-components';\n```\nand finally in the html start using the module\n\n",
    "readme/al-cadence-selector/README": "# Al cadence component\n\n## Summary\n\nThis component allow the user select the cadence, hour, minutes of a report schedule and return the cargo structure\n\n\nList authors.\nMaryit Sanchez\n\n## Example Usage\n\n```html\n<al-cadence-selector [frequencies]=\"frequencies\"\n                    (onCadenceChanged)=\"onCadenceChanges($event)\"></al-cadence-selector>\n```\n\n## Inputs\n\nfrequencies the list of cadence supported by a report, for example:\n* ['daily']\n* ['monthly']\n* ['weekly']\n* ['daily', 'weekly', 'monthly']\n\n## Outputs\n\nonCadenceChanged returns the cargo structure for the component\nexamples:\n\nwhen the cadence selected is daily return a CargoReportDailyScheduleV2\n```\n{\n    daily: {\n        hour: 5,\n        minute: 22\n    }\n};\n```\n\nwhen the cadence selected is weekly return a CargoReportWeeklyScheduleV2\n```\n{\n    weekly: {\n        day: 'sunday',\n        hour: 1,\n        minute: 22\n    }\n};\n```\n\nwhen the cadence selected is monthly return a CargoReportMonthlyScheduleV2\n```\n{\n    monthly: {\n        day: 2,\n        hour: 23,\n        minute: 00\n    }\n};\n```\n\n## Notes\n* For weekly we return equivalent to monday, hour, minutes selected by the user(using user time) but we convert to utc time.\n\n* For monthly we return equivalent to 1sr day of the month, hour, minutes selected by the user(using user time) but we convert to utc time.\n\n* For daily we return the minutes selected by the user(using user time) but we convert to utc time.\n",
    "readme/al-schedule-with-delay/README": "# al-schedul-with-delay\n\n## Summary\n\nThis component \n\n\nList authors.\nJorge Mario Valencia Herrera\n\n## Example Usage\n\n```html\n<al-schedule-with-delay #scheduleWithDelay\n                        (onDelayChange)=\"delayChange($event)\">\n</al-schedule-with-delay>\n```\n\n## Outputs\n\nonDelayChange emits the schedule time as AlScheduleTime interface\nexamples:\n\n```\n{\n    hour: 5,\n    minute: 22\n};\n```\n",
    "sample/new-pattern-library/al-buttons/basicbuttons": "<al2-button class=\"u-mr-2\" type=\"default\" label=\"Default\"></al2-button>\n<al2-button class=\"u-mr-2\" type=\"default-outline\" label=\"Default Outline\"></al2-button>\n<al2-button class=\"u-mr-2\" type=\"default-ghost\" label=\"Default Ghost\"></al2-button>",
    "sample/new-pattern-library/al-inputs/ngformsusage": "// markup\n<form [formGroup]=\"form\">\n    <al-input\n        type='text'\n        label=\"Monster Name\"\n        [value]=\"monsterName\"\n        [required]=\"true\"\n        tip=\"Give it a name!\"\n        hint=\"This is a hint\"\n        formControlName=\"monster\">\n    </al-input>\n</form>\n\n// code\n\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport class AlInputExamplesComponent implements OnInit {\n    monsterName: string = '';\n    form: FormGroup;\n\n    ngOnInit() {\n        this.form = new FormGroup({\n            monster: new FormControl(this.monsterName, [Validators.required, Validators.minLength(3), Validators.maxLength(50)])\n        });\n    }\n}\n",
    "sample/components/split-dropdown/button": "<p-splitButton [model]=\"splitButtonItems\" label=\"Search\" [model]=\"items\"></p-splitButton>",
    "sample/components/tab-controls/tab": "\n<p-tabView>\n    <p-tabPanel header=\"Tab One\">\n        Tab Content\n    </p-tabPanel>\n    <p-tabPanel header=\"Tab Two\">\n        Tab Content\n    </p-tabPanel>\n    <p-tabPanel header=\"Tab Three\">\n        Tab Content\n    </p-tabPanel>\n</p-tabView>",
    "sample/components/forms-wizard-stepper/wizard": "<al-wizard-stepper #alWizard>\n    <al-step stepTitle=\"Step 1\">Step 1 content</al-step>\n    <al-step stepTitle=\"Step 2\">Step 2 content</al-step>\n    <al-step stepTitle=\"Step 3\">Step 3 content</al-step>\n</al-wizard-stepper>\n<button pButton type=\"button\" label=\"Step back\" (click)=\"alWizard.stepBack()\"></button>\n<button pButton type=\"button\" label=\"Step forward\" (click)=\"alWizard.stepForward()\"></button>\n",
    "sample/components/cards-aims/card": "<div class=\"user-tile\" role=\"button\" (click)=\"onUserSelectedEvent(userReference)\">\n    <div class=\"nameColoredSquare\">\n        <div class=\"al-identity-icon\">\n            <div class=\"al-identity-icon-space\">\n                <div class=\"identity-icon color1\">\n                    <div class=\"colored-initials\">AL</div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"info\">\n        <div class=\"acc-name\">Alert Logic</div>\n        <div class=\"acc-email\">person@alertlogic.com</div>\n    </div>\n    <button pButton type=\"button\" label=\"VIEW\" class=\"primary flat\"></button>\n</div>",
    "sample/components/button-groups/buttonGroup2": "<p-selectButton [options]=\"assetTypes\" [(ngModel)]=\"selectedType\"></p-selectButton>",
    "sample/components/button-groups/buttonGroup1": "<p-selectButton [options]=\"textSelectButtons\" [(ngModel)]=\"selectedType\"></p-selectButton>",
    "sample/components/button-groups/buttonGroup3": "<p-selectButton [options]=\"assetTypes\" [(ngModel)]=\"selectedTypes\" multiple=\"multiple\"></p-selectButton>",
    "sample/components/lists-table/table": "<p-radioButton name=\"group1\" value=\"Option 1\" label=\"Option 1\" [(ngModel)]=\"val1\" inputId=\"opt1\"></p-radioButton>",
    "sample/components/forms-chips/chips": "<p-chips [(ngModel)]=\"values1\"></p-chips>",
    "sample/components/forms-chips/chips3": "<div class=\"static-chips\">\n    <i class=\"al al-vpc\"></i>\n    <div class=\"title\">VPC-123ABC</div>\n    <div class=\"subtitle\">VPC</div>\n    <div class=\"close material-icons\">cancel</div>\n</div>",
    "sample/components/forms-chips/chips2": "<p-chips>\n    <i class=\"al al-vpc\"></i> \n    <div class=\"title\">title</div> \n    <div class=\"subtitle\">subtitle</div> \n</p-chips>",
    "sample/components/forms-chips/badge": "<div class=\"badge + color class\">In Progress</div>",
    "sample/components/forms-slider/slider2": "<div class=\"slider\">\n    <input type=\"text\" pInputText [(ngModel)]=\"val2\" />\n    <p-slider [(ngModel)]=\"val2\"></p-slider>\n    <div class=\"labels\">\n        <div class=\"item left\">Low</div>\n        <div class=\"item mid\">Normal</div>\n        <div class=\"item right\">High</div>\n    </div>\n</div>\n\nTypescript: val2: number;",
    "sample/components/forms-slider/slider5": "<h5>Range: {{rangeValues[0] + ' - ' + rangeValues[1]}}</h5>\n<p-slider [(ngModel)]=\"rangeValues\" [range]=\"true\"></p-slider>\n\nTypescript: rangeValues: number[] = [20,80];",
    "sample/components/forms-slider/slider": "<h5 class=\"first\">Basic: {{val1}}</h5>\n<p-slider [(ngModel)]=\"val1\"></p-slider>\n\nTypescript: val1: number;",
    "sample/components/forms-slider/slider3": "<h5>Animate: {{val3}}</h5>\n<p-slider [(ngModel)]=\"val3\" [animate]=\"true\"></p-slider>\n\nTypescript: val3: number;",
    "sample/components/forms-slider/slider6": "<h5>Vertical: {{val5}}</h5>\n<p-slider [(ngModel)]=\"val5\" [style]=\"{'height':'14em'}\" orientation=\"vertical\"></p-slider>\n\nTypescript: val5: number;",
    "sample/components/forms-slider/slider4": "<h5>Step: {{val4}}</h5>\n<p-slider [(ngModel)]=\"val4\" [step]=\"5\"></p-slider>\n\nTypescript: val4: number;",
    "sample/components/icon-buttons/button1": "<button type=\"button\" icon=\"ui-icon-open-in-browser\" class=\"primary\" pButton></button>\n\n",
    "sample/components/overlays-bottom-sheets/2": "<div class=\"p-col-[set this]\">\n    <div class=\"label\">Label</div>\n    <div class=\"desc\">Description</div>\n</div>",
    "sample/components/overlays-bottom-sheets/4": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2\">Title with input field directly below</h2>\n</div>\n<div class=\"p-col-12 p-nogutter ui-fluid\">\n    <div class=\"form-row-top\">\n        <span class=\"md-inputfield\">\n            <input type=\"text\" pInputText>\n            <label>Input Field</label>\n        </span>\n    </div>\n</div>",
    "sample/components/overlays-bottom-sheets/1": "<div class=\"p-grid p-nogutter\">\n    <div class=\"p-col-12\">\n        <h2 class=\"first\">First Title in Card/Content Body</h2>\n    </div>\n</div>",
    "sample/components/overlays-bottom-sheets/3": "<div class=\"p-col-[set this]\">\n    <div class=\"label\">Label\"</div>\n    <div class=\"desc\">\n        <ul>\n            <li>list item</li>\n            <li>list item</li>\n        </ul>\n    </div>\n</div>",
    "sample/components/card-buttons/cardBtn1": "<div class=\"btnGroupLeft\">\n    <button type=\"button\" class=\"cardBtn flat left\" label=\"Edit\" icon=\"ui-icon-edit\" pButton></button>\n</div>",
    "sample/components/card-buttons/cardBtn3": "<div class=\"btnGroup\">\n    <div class=\"btnGroupLeft\">\n        <button type=\"button\" class=\"cardBtn flat left\" label=\"Label\"\n            icon=\"ui-icon-open-in-browser\" pButton></button>\n    </div>\n    <div class=\"btnGroupRight\">\n        <button type=\"button\" icon=\"ui-icon-edit\" class=\"cardBtn flat right\" label=\"Edit\" pButton></button>\n    </div>\n</div>",
    "sample/components/card-buttons/cardBtn2": "<div class=\"btnGroupRight\">\n    <button type=\"button\" class=\"cardBtn flat right\" label=\"Edit\" icon=\"ui-icon-edit\" pButton></button>\n</div>",
    "sample/components/forms-switch/switch3": "<p-slider [(ngModel)]=\"rangeValues\" [range]=\"true\"></p-slider>\n\nTypescript:\nrangeValues: number[] = [20, 80];",
    "sample/components/forms-switch/switch2": "<div class=\"labeled-switch\">\n    <p-inputSwitch [(ngModel)]=\"checked2\"></p-inputSwitch>\n    <div class=\"label\">Enabled</div>\n</div>",
    "sample/components/forms-switch/switch": "<p-inputSwitch [(ngModel)]=\"checked2\"></p-inputSwitch>",
    "sample/components/cards-dashboard-widgets/card": "<div class=\"widget\">\n    <div class=\"card card-w-title\">\n        <h2 class=\"widget-header\">\n            Widget Title\n            <div class=\"btnGroupRight\">\n                <button type=\"button\" class=\"flat round right\" icon=\"ui-icon-settings\" pButton></button>\n            </div>\n        </h2>\n        <div class=\"card-content\"></div>\n        <div class=\"card-footer\">\n            <div class=\"btnGroupRight\">\n                <button type=\"button\" class=\"flat right\" label=\"Button\" pButton></button>\n                <button type=\"button\" class=\"right\" label=\"Button\" pButton></button>\n            </div>\n        </div>\n    </div>\n</div>",
    "sample/components/forms-schedule-time-with-delay/schedule-time-with-delay": "<al-schedule-with-delay #scheduleWithDelay\n                        (onDelayChange)=\"delayChange($event)\">\n</al-schedule-with-delay>\n",
    "sample/components/progress-indicators/progress2": "<p-progressBar [value]=\"50\"></p-progressBar>",
    "sample/components/progress-indicators/progress1": "<p-progressBar [value]=\"value\"></p-progressBar>",
    "sample/components/progress-indicators/progress3": "<p-progressBar mode=\"indeterminate\" [style]=\"{'height': '6px'}\"></p-progressBar>",
    "sample/components/forms-checkbox/checkbox1": "<div class=\"p-grid p-nogutter\">\n    <div class=\"p-col-12 form-row\">\n        <p-checkbox name=\"groupname\" value=\"val1\" [(ngModel)]=\"selectedValues\"></p-checkbox>\n    </div>\n</div>\n\n*** Use .p-grid and .p-nogutter for correct spacing.",
    "sample/components/cards-deployments/card": "<div class=\"card card-w-title\">\n    <h1 class=\"azure\"><i class=\"al al-azure\"></i>Microsoft Azure</h1>\n    <div class=\"card-content\">\n        <div class=\"subtitle\">September 21, 2019</div>\n        <div class=\"deployment-name\">My Azure Deployment</div>\n    </div>\n    <div class=\"card-footer\">\n        <div class=\"btnGroupRight\">\n            <button type=\"button\" class=\"flat right\" label=\"Delete\" pButton></button>\n            <button type=\"button\" class=\"flat primaryAction right\" label=\"Edit\"\n                pButton></button>\n        </div>\n    </div>\n</div>",
    "sample/components/inputs-textareas/5": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2\">Required Input Field</h2>\n</div>\n<div class=\"p-col-[set this] input-row\">\n    <span class=\"md-inputfield\">\n        <input type=\"text\" pInputText class=\"ng-dirty ng-invalid\" placeholder=\"Invalid\">\n        <div class=\"ui-message ui-messages-error ui-corner-all\">\n            This field is required\n        </div>\n    </span>\n</div>",
    "sample/components/inputs-textareas/2": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2 first\">Title with input field directly below</h2>\n</div>\n<div class=\"p-col-[set this] p-nogutter ui-fluid\">\n    <div class=\"form-row\">\n        <span class=\"md-inputfield\">\n            <input type=\"text\" pInputText>\n            <label>Input Field</label>\n        </span>\n    </div>\n</div>",
    "sample/components/inputs-textareas/7": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2\">Textarea Input Field with Float Label</h2>\n</div>\n<span class=\"ui-float-label\">\n    <textarea id=\"float-input\" rows=\"3\" cols=\"30\" pInputTextarea autoResize=\"autoResize\" class=\"ui-inputtext input-row top\"></textarea>\n    <label for=\"float-input\">Summary</label>\n</span>",
    "sample/components/inputs-textareas/4": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2\">Password Input Field</h2>\n</div>\n<div class=\"p-col-[set this] input-row\">\n    <span class=\"md-inputfield\">\n        <input pInputText type=\"password\">\n        <label>Password</label>\n    </span>\n</div>",
    "sample/components/inputs-textareas/1": "<div class=\"p-grid p-nogutter ui-fluid input-row top\">\n    <div class=\"p-col-[set this]\">\n        <span class=\"md-inputfield\">\n            <input type=\"text\" pInputText>\n            <label>Happy Little Input Field</label>\n        </span>\n    </div>\n</div>",
    "sample/components/inputs-textareas/6": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2\">Disabled Input Field</h2>\n</div>\n<div class=\"p-col-[set this] input-row\">\n    <input type=\"text\" pInputText placeholder=\"Disabled\" disabled=\"disabled\">\n</div>",
    "sample/components/inputs-textareas/3": "<div class=\"p-col-12\">\n    <h2 class=\"form-h2 first\">Default Input Field</h2>\n</div>\n<div class=\"p-col-[set this]\">\n    <div class=\"input-row top\">\n        <span class=\"md-inputfield\">\n            <input type=\"text\" pInputText>\n            <label>Name</label>\n        </span>\n    </div>\n</div>",
    "sample/components/forms-radio-buttons/radio": "<div class=\"p-grid p-nogutter\">\n    <div class=\"p-col-[set-this] form-row\">\n        <p-radioButton name=\"groupname\" value=\"val1\" [(ngModel)]=\"selectedValue\"></p-radioButton>\n    </div>\n</div>\n\n*** Use .p-grid and .p-nogutter for correct spacing.",
    "data/playground/merry-go-round/fake-quotes": {
        "quotations": [
            {
                "text": "Do or do not; there is no 'try'.",
                "attribution": "Dumbledore"
            },
            {
                "text": "Progress is impossible without change, and those who cannot change their minds cannot change anything.",
                "attribution": "George Bernard Shaw"
            },
            {
                "text": "Emptiness only appears to be failure: today's deserted wasteland will be tomorrow's thriving city.",
                "attribution": "Unknown"
            },
            {
                "text": "We all want progress, but if you're on the wrong road, progress means doing an about-turn and walking back to the right road; in that case, the man who turns back soonest is the most progressive.",
                "attribution": "C. S. Lewis"
            },
            {
                "text": "Without deviation from the norm, progress is not possible.",
                "attribution": "Frank Zappa"
            }
        ]
    }
}